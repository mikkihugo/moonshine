[package]
name = "moon-shine"
version = "2.0.0"
edition = "2021"
rust-version = "1.80"
license = "MIT"
description = "AI-powered code quality extension for moonrepo - TypeScript/JavaScript linting, fixing, and optimization"
authors = ["ZenFlow Contributors <team@zenflow.dev>"]
homepage = "https://github.com/zenflow/zenflow"
repository = "https://github.com/zenflow/zenflow"
documentation = "https://docs.zenflow.dev/moon-shine"
readme = "README.md"
keywords = ["moonrepo", "ai", "typescript", "linting", "dspy"]
categories = ["development-tools", "wasm", "web-programming"]

[lib]
name = "moon_shine"
path = "src/lib.rs"
crate-type = ["cdylib", "rlib"]

# Standalone package - not part of workspace

[features]
default = ["wasm", "optimized-deps", "embedded_rulebase"]
embedded_rulebase = []

wasm = ["dep:console_error_panic_hook", "dep:lol_alloc"]

# Dependency optimization feature
optimized-deps = []

# Minimal feature set for faster WASM builds
minimal = ["wasm"]

# Full analysis features (larger binary)
full-analysis = ["wasm"]

# Optional strict TypeScript analysis (regex-based)
strict-ts = []

# Neural network features for pattern analysis (WASM-compatible)
neural-patterns = [
  "dep:candle-core",
  "dep:candle-nn",
  "dep:candle-transformers",
  "dep:tokenizers",
]

# ONNX runtime for lightweight models (native only - not WASM compatible)
onnx-runtime = ["dep:ort"]

# StarCoder integration for fast pattern detection (WASM-compatible via candle)
starcoder = ["neural-patterns"]

# WASM-only features (excludes ONNX)
wasm-neural = ["neural-patterns"]

# Embedded Rust toolchain analysis
embedded-rust-toolchain = [
  "dep:syn",
  "dep:quote",
  "dep:proc-macro2",
  "dep:clippy_lints",
  "dep:clippy_utils",
  "dep:prettyplease",
  "dep:cargo_metadata",
  "dep:rustc_version",
]

[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
thiserror = "2.0"
anyhow = "1.0"
futures = "0.3"
async-trait = "0.1"
once_cell = "1.20"
lazy_static = "1.4"
json5 = "0.4"
# High-speed WASM-compatible KV store for session storage + JSON backup
assemblage_kv = "0.1.0"
# csv = "1.3" # Not needed - Moon tasks handle file parsing
# rayon = "1.8" # Removed - not WASM compatible

# Note: Moon tasks handle all parsing (TypeScript, ESLint, etc.)
# WASM extension focuses on coordination via JSON protocol

# Moon WASM extensions don't need web bindings - only extism runtime

# Console logging for WASM
console_error_panic_hook = { version = "0.1", optional = true }
lol_alloc = { version = "0.4", optional = true }

# Core WASM extension dependencies
chrono = { version = "0.4.42", features = ["serde"] }
uuid = { version = "1.0", features = ["v4"] }
regex = "1.11.2"
schemars = "0.8"
globset = "0.4"
extism-pdk = "1.4.1"
moon_pdk = { version = "0.3.2", features = ["schematic"] }
moon_pdk_api = "0.3.3"
# Moon PDK handles extension args - clap might not be needed
# clap = { version = "4.4", features = ["derive"] }

# WASM-specific dependencies
getrandom = { version = "0.3" }

# Parallel execution support (WASM-compatible)
threadpool = "1.8"

# COPRO + Pattern Detection dependencies (always included)
indexmap = { version = "1.9" }

# Removed OXC dependencies - using alternative parsing/analysis approach

# Configuration and ignore pattern dependencies
ignore = "0.4"     # Fast .gitignore and ignore pattern matching
serde_yaml = "0.9" # YAML parsing for ESLint configs
toml = "0.8"       # TOML parsing for additional configs
glob = "0.3"       # Glob pattern matching for file discovery
walkdir = "2.0"    # Efficient directory traversal

log = "0.4"          # Logging facade
petgraph = "0.6"     # Graph algorithms for dependency analysis
lru = "0.12"         # LRU cache for expensive computations
dashmap = "6.1"      # Concurrent hash map for thread-safe caching
tokio-stream = "0.1" # Async stream processing
tokio-util = "0.7"   # Advanced async utilities for workflow coordination
parking_lot = "0.12" # Fast synchronization primitives

# Advanced analysis features (temporarily disabled for WASM compatibility)
# tree-sitter = "0.20"            # Alternative parser for complexity analysis
# tree-sitter-javascript = "0.20" # JavaScript grammar for tree-sitter
# tree-sitter-typescript = "0.20" # TypeScript grammar for tree-sitter
similar = "2.6"     # Text diffing for change analysis
levenshtein = "1.0" # String distance for similarity analysis

# OXC Benefits for Moon-Shine:
# - 10-100x faster than regex-based analysis
# - Full semantic understanding for precise auto-fixes
# - Memory-efficient for large TypeScript codebases
# - WASM-compatible Rust-native implementation
# - Professional-grade diagnostics and transformations

# DSPy WASM-compatible dependencies (always included)
bon = "3.7"
secrecy = { version = "0.10", features = ["serde"] }

# Performance optimizations for AI processing
aho-corasick = "1.1" # Fast multi-pattern string searching for code analysis

# WASM-compatible signature macro dependencies
serde_valid = "1.0.5"     # JSON Schema validation with derive macros (WASM-safe)
serde-json-wasm = "1.0.1" # Optimized JSON for WASM (deterministic, smaller size)
paste = "1.0"             # Token pasting for macro generation (WASM-safe)

# DSPy signature macros (WASM-compatible implementation)
# dsrs_macros = "0.1"  # Replaced with WASM-compatible declarative macros

# Neural network dependencies for pattern analysis (optional, WASM-compatible)
candle-core = { version = "0.8", optional = true, default-features = false }
candle-nn = { version = "0.8", optional = true, default-features = false }
candle-transformers = { version = "0.8", optional = true, default-features = false }
tokenizers = { version = "0.20", optional = true, default-features = false }
# Note: ONNX Runtime has limited WASM support - for native builds only
ort = { version = "2.0.0-rc.10", optional = true }

# Embedded Rust toolchain dependencies (compile Clippy, rustfmt, etc. directly in)
syn = { version = "2.0", features = [
  "full",
  "parsing",
  "printing",
  "proc-macro",
], optional = true }
quote = { version = "1.0", optional = true }
proc-macro2 = { version = "1.0", optional = true }

# Clippy lints compiled directly into WASM (using correct available versions)
clippy_lints = { version = "0.0.212", optional = true }
clippy_utils = { version = "0.1.92", optional = true }

# Rustfmt stable - alternative approach using prettyplease for formatting
prettyplease = { version = "0.2", optional = true }

# Cargo metadata for dependency analysis
cargo_metadata = { version = "0.18", optional = true }

# Additional Rust analysis tools
rustc_version = { version = "0.4", optional = true }
serde_derive = { version = "1.0", optional = true }

# Note: Security warnings for paste, libyml, and serde_yml are from transitive
# dependencies in moon_pdk. These will be addressed in future moon releases.

# ================================================================================
# WASM-SPECIFIC OPTIMIZATIONS: Reduce binary size and improve performance
# ================================================================================
[target.'cfg(target_arch = "wasm32")'.dependencies]
# Override heavy dependencies with lighter alternatives for WASM
rayon = { version = "1.8", optional = true } # Disable rayon for WASM by default
tokio = { version = "1.0", features = [
  "time",
  "rt",
  "macros",
], default-features = false } # Minimal tokio for WASM with select macro

# WASM-compatible neural network dependencies (lighter alternatives)
# Candle works in WASM with default configuration
# Note: ONNX Runtime is not included in WASM builds - use candle for inference

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# Full features for native builds
rayon = "1.8" # Full rayon for native
tokio = { version = "1.0", features = [
  "time",
  "rt",
  "macros",
  "fs",
  "process",
] } # Full tokio for native

[build-dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

[dev-dependencies]
# Moon WASM runtime testing
moon_pdk_test_utils = "0.3.3"
starbase_sandbox = "0.9.9"    # Required for Moon PDK test utilities
serde_test = "1.0"
pretty_assertions = "1.4"

# Comprehensive testing framework dependencies
criterion = { version = "0.5", features = [
  "html_reports",
] } # Benchmarking for performance tests
proptest = "1.4" # Property-based testing
quickcheck = "1.0" # QuickCheck-style property testing
mockall = "0.13" # Mock generation for London school TDD
tempfile = "3.8" # Temporary files and directories
test-case = "3.3" # Parameterized tests
rstest = "0.18" # Fixture-based testing
arbitrary = { version = "1.3", features = [
  "derive",
] } # Generate arbitrary data for property tests
fake = { version = "2.9", features = [
  "derive",
] } # Generate fake data for testing
insta = "1.34" # Snapshot testing
wiremock = "0.6" # HTTP mocking for external API tests
once_cell = "1.21" # Static initialization for test fixtures
maplit = "1.0" # Convenient map/set literals
serial_test = "3.0" # Sequential test execution
env_logger = "0.11" # Logging for test debugging

# Code coverage tools
# cargo-tarpaulin = "0.32"                                      # Coverage analysis for Rust - conflicts with indexmap version

# WASM optimization profiles defined at workspace root

# Moon WASM extensions use extism runtime, not wasm-pack

[[example]]
name = "metasignature_quick_demo"
path = "examples/metasignature_quick_demo.rs"
required-features = ["wasm"]
