name: Build and Test Moon Shine Extension

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          targets: wasm32-unknown-unknown

      - name: Install Moon
        run: |
          curl -fsSL https://moonrepo.dev/install/proto.sh | bash
          echo "$HOME/.proto/bin" >> $GITHUB_PATH
          proto install moon

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y binaryen jq

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Run WASM tests
        run: cargo test --target wasm32-unknown-unknown --features wasm

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y binaryen jq

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build extension
        run: ./scripts/build-extension.sh

      - name: Verify WASM output
        run: |
          ls -la dist/
          file dist/moon-shine.wasm
          wasm-validate dist/moon-shine.wasm

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moon-shine-extension
          path: |
            dist/
            !dist/checksums.txt
          retention-days: 7

      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: checksums
          path: dist/checksums.txt

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Moon
        run: |
          curl -fsSL https://moonrepo.dev/install/proto.sh | bash
          echo "$HOME/.proto/bin" >> $GITHUB_PATH
          proto install moon

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: moon-shine-extension
          path: dist

      - name: Run integration tests
        run: ./scripts/test-extension.sh all

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-workspace/
          retention-days: 3

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Check dependencies
        run: cargo tree --duplicates

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y hyperfine

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: moon-shine-extension
          path: dist

      - name: Run benchmarks
        run: |
          # Create test files
          mkdir -p benchmark-files
          for i in {1..10}; do
            cp demo-input.ts "benchmark-files/test$i.ts"
          done

          # Benchmark WASM loading time
          hyperfine --warmup 3 \
            'wasmtime dist/moon-shine.wasm' \
            --export-json benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json

  release:
    name: Release Extension
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test, build, integration-test, security-audit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: moon-shine-extension
          path: dist

      - name: Download checksums
        uses: actions/download-artifact@v4
        with:
          name: checksums
          path: dist

      - name: Create release archive
        run: |
          cd dist
          tar -czf ../moon-shine-extension-${{ github.event.release.tag_name }}.tar.gz *
          cd ..

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: moon-shine-extension-${{ github.event.release.tag_name }}.tar.gz
          asset_name: moon-shine-extension-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Update extension registry
        if: github.event.release.prerelease == false
        run: |
          echo "TODO: Update Moon extension registry with new release"
          echo "Registry URL: https://moonrepo.dev/extensions"
          echo "Extension version: ${{ github.event.release.tag_name }}"

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Build documentation
        run: |
          cargo doc --target wasm32-unknown-unknown --no-deps --document-private-items
          echo '<meta http-equiv="refresh" content="0; url=moon_shine">' > target/wasm32-unknown-unknown/doc/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/wasm32-unknown-unknown/doc
          destination_dir: docs

  cross-platform-test:
    name: Cross Platform Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install platform dependencies
        shell: bash
        run: |
          case "${{ runner.os }}" in
            Linux)
              sudo apt-get update
              sudo apt-get install -y binaryen
              ;;
            macOS)
              brew install binaryen
              ;;
            Windows)
              # For Windows, we'll skip optimization for now
              echo "Skipping binaryen on Windows"
              ;;
          esac

      - name: Build WASM extension
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            OPTIMIZE=false ./scripts/build-extension.sh
          else
            ./scripts/build-extension.sh
          fi

      - name: Verify build
        shell: bash
        run: |
          ls -la dist/
          file dist/moon-shine.wasm || echo "file command not available"