name: Release Moon Shine Extension

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Moon Shine Extension ${{ github.ref_name }}
          body: |
            ## Moon Shine Extension ${{ github.ref_name }}

            AI-powered TypeScript/JavaScript linter with COPRO optimization for Moon workspaces.

            ### Installation

            ```bash
            # Download and install
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/moon-shine-extension-${{ github.ref_name }}.tar.gz | tar -xz
            cd moon-shine-extension-${{ github.ref_name }}
            ./install.sh

            # Or install directly from release
            moon ext install https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/moon-shine.wasm
            ```

            ### Usage

            ```bash
            # Run AI linter on TypeScript files
            moon run shine src/

            # Lint-only mode (no AI fixes)
            moon run shine-lint src/

            # CI reporting mode
            moon run shine-report src/
            ```

            ### What's Changed

            - Full Moon PDK integration
            - WASM optimization for faster loading
            - Enhanced AI provider routing
            - Improved error handling and logging
            - Cross-platform compatibility

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v2.0.0...${{ github.ref_name }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y binaryen jq

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build optimized extension
        run: ./scripts/build-extension.sh

      - name: Create installation package
        run: |
          mkdir -p release-package
          cp -r dist/* release-package/
          cp scripts/install-extension.sh release-package/install.sh
          cp README.md release-package/
          cp LICENSE release-package/ || echo "LICENSE file not found"

          # Create installation instructions
          cat > release-package/INSTALL.md << 'EOF'
          # Moon Shine Extension Installation

          ## Prerequisites

          - Moon v1.0.0 or later
          - Rust 1.80+ (for building from source)

          ## Quick Install

          ```bash
          # Make install script executable
          chmod +x install.sh

          # Install extension
          ./install.sh

          # Verify installation
          moon ext list | grep moon-shine
          ```

          ## Manual Installation

          1. Copy `moon-shine.wasm` to `~/.moon/extensions/moon-shine/`
          2. Copy `manifest.json` to `~/.moon/extensions/moon-shine/`
          3. Register with Moon: `moon ext install moon-shine`

          ## Usage

          Add to your `moon.yml`:

          ```yaml
          tasks:
            shine:
              command: 'moon'
              args: ['ext', 'run', 'moon-shine', '--']
              inputs: ['**/*.{ts,tsx,js,jsx}']
          ```

          Then run:

          ```bash
          moon run shine src/
          ```
          EOF

          # Create release archive
          cd release-package
          tar -czf ../moon-shine-extension-${{ github.ref_name }}.tar.gz *
          cd ..

      - name: Upload WASM extension
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/moon-shine.wasm
          asset_name: moon-shine.wasm
          asset_content_type: application/wasm

      - name: Upload manifest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/manifest.json
          asset_name: manifest.json
          asset_content_type: application/json

      - name: Upload release package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: moon-shine-extension-${{ github.ref_name }}.tar.gz
          asset_name: moon-shine-extension-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  publish-extension:
    name: Publish to Extension Registry
    runs-on: ubuntu-latest
    needs: build-and-upload
    if: "!contains(github.ref_name, 'beta') && !contains(github.ref_name, 'alpha')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare registry submission
        run: |
          cat > extension-registry.json << EOF
          {
            "name": "moon-shine",
            "version": "${{ github.ref_name }}",
            "description": "AI-powered TypeScript/JavaScript linter with COPRO optimization",
            "author": "PrimeCode Moon Extensions",
            "homepage": "https://github.com/${{ github.repository }}",
            "repository": "https://github.com/${{ github.repository }}",
            "download_url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/moon-shine.wasm",
            "manifest_url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/manifest.json",
            "documentation_url": "https://github.com/${{ github.repository }}/blob/main/README.md",
            "license": "MIT",
            "keywords": ["typescript", "javascript", "linting", "ai", "copro"],
            "moon_version": ">=1.0.0",
            "categories": ["linting", "ai", "code-quality"],
            "platforms": ["wasm32"],
            "checksum": {
              "algorithm": "sha256",
              "url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/checksums.txt"
            }
          }
          EOF

      - name: Submit to Moon Extension Registry
        run: |
          echo "TODO: Submit extension to Moon registry"
          echo "Registry submission data:"
          cat extension-registry.json
          # curl -X POST https://api.moonrepo.dev/extensions \
          #   -H "Content-Type: application/json" \
          #   -H "Authorization: Bearer ${{ secrets.MOON_REGISTRY_TOKEN }}" \
          #   -d @extension-registry.json

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: always()
    steps:
      - name: Notify on success
        if: needs.build-and-upload.result == 'success'
        run: |
          echo "✅ Moon Shine Extension ${{ github.ref_name }} released successfully!"
          echo "Download: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

      - name: Notify on failure
        if: needs.build-and-upload.result == 'failure'
        run: |
          echo "❌ Release failed for ${{ github.ref_name }}"
          exit 1