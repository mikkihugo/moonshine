{
  "rules": {
    "C001": {
      "name": "Functions should not exceed 50 lines",
      "description": "Improve readability and maintainability, reduce cognitive load, and enhance testability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube",
        "detekt",
        "ESLint",
        "PMD"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C002": {
      "name": "Avoid code duplication > 10 lines",
      "description": "Prevent messy code, make refactoring easier, and apply the DRY principle.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "PMD",
        "SonarQube",
        "jscpd"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C003": {
      "name": "Use clear variable names; avoid arbitrary abbreviations",
      "description": "Improve readability, searchability, and enable self-documenting code.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint (custom rule)",
        "detekt"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C004": {
      "name": "No TODOs older than 14 days",
      "description": "Keep the codebase clean and updated, avoid accumulating technical debt.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Custom Git hook",
        "linter TODO scanner"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C005": {
      "name": "Each function should do only one thing",
      "description": "Ensure single responsibility, better testability and readability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube",
        "CodeClimate"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C006": {
      "name": "Function names must be verbs or verb-noun combinations",
      "description": "Clearly express the purpose of the action and promote self-documenting code.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "PR review",
        "AI Suggestion (Copilot Review)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C007": {
      "name": "Avoid comments that just restate the code",
      "description": "Eliminate redundancy and encourage self-explanatory code.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "AI review",
        "Lint static analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C008": {
      "name": "Declare variables close to where they are used",
      "description": "Improve locality, avoid \"dangling\" variables, and reduce cognitive load.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter (e.g.",
        "ktlint",
        "ESLint)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C009": {
      "name": "Each class should have a single responsibility",
      "description": "Improve maintainability and scalability, avoid bloated classes.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube",
        "CodeClimate"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS"
      ]
    },
    "C010": {
      "name": "Avoid more than 3 levels of nested blocks",
      "description": "Reduce code complexity by limiting nesting, improving readability and maintainability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint",
        "SonarQube",
        "TSLint",
        "Detekt",
        "PMD"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS"
      ]
    },
    "C011": {
      "name": "Avoid catching generic exceptions (e.g., `catch (Exception)`)",
      "description": "Prevent hiding real issues and ensure specific and recoverable error handling.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analysis",
        "SonarQube"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C012": {
      "name": "Clearly separate Command and Query",
      "description": "Ensure single responsibility and clear side-effects following the Command Query Separation (CQS) principle.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "PR review",
        "AI code review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C013": {
      "name": "Do not use dead code",
      "description": "Keep the codebase clean; rely on Git history instead of commenting out code.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter + Git hook"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C014": {
      "name": "Use Dependency Injection instead of directly instantiating dependencies",
      "description": "Improve testability and decoupling by applying the Dependency Inversion Principle.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analyzer",
        "PR review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C015": {
      "name": "Use domain language in class/function names",
      "description": "Ensure correct domain understanding, reduce cognitive load, and improve communication with domain experts.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Review + AI Suggestion"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C016": {
      "name": "TODOs must have a specific reason",
      "description": "Avoid vague TODOs and ensure traceability and accountability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Regex + Linter rule"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C017": {
      "name": "Do not put business logic inside constructors",
      "description": "Ensure constructors only initialize objects, not perform business logic, to improve testability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analyzer / Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "TESTABILITY",
        "RELIABILITY",
        "INTEGRATION"
      ]
    },
    "C018": {
      "name": "Do not throw generic errors; always provide detailed messages",
      "description": "Facilitate debugging, ensure traceability, and provide full context.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter + Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C019": {
      "name": "Do not use `error` log level for non-critical issues",
      "description": "Prevent noisy logs and false alarms; ensure consistent and meaningful log levels across the system.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Log linter / Custom rule"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C020": {
      "name": "Do not import unused modules or libraries",
      "description": "Reduce noise, improve build performance and code readability, and minimize bundle size.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter (e.g.",
        "ESLint",
        "ktlint)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C021": {
      "name": "Consistently order import statements",
      "description": "Improve consistency, readability, and manageability of imports; reduce merge conflicts.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Import sorter (e.g.",
        "ESLint sort-imports",
        "IntelliJ organize imports",
        "ktlint)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C022": {
      "name": "Do not leave unused variables",
      "description": "Eliminate clutter, improve code clarity, and reduce memory footprint.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter / Compiler warning"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C023": {
      "name": "Do not declare duplicate variable names in the same scope, including nested closures",
      "description": "Avoid confusion and hard-to-trace bugs; prevent variable shadowing.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Compiler / Linter"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C024": {
      "name": "Do not scatter hardcoded constants throughout the logic",
      "description": "Improve reusability, readability, and ease of configuration changes.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter / Convention"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "C025": {
      "name": "Each file should contain only one main class",
      "description": "Reduce cognitive load when reading code; improve searchability and maintainability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Convention / Linter warning"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C026": {
      "name": "Avoid functions with too many parameters (>6)",
      "description": "Simplify functions, reduce confusion when calling, and minimize coupling.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube",
        "Static Analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C027": {
      "name": "Each module should have a README.md if it is independent",
      "description": "Improve onboarding, maintenance, and knowledge sharing.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "CI check / Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C028": {
      "name": "Use guard clauses instead of nested ifs",
      "description": "Improve readability and avoid deep nesting, reducing cognitive complexity.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "PR review",
        "linter"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C029": {
      "name": "All `catch` blocks must log the root cause of the error",
      "description": "Improve traceability and incident resolution; avoid silent failures.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analyzer / PR review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C030": {
      "name": "Use custom error classes instead of generic system errors",
      "description": "Improve error classification and handling; increase maintainability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter / Convention"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C031": {
      "name": "Validation logic must be separated",
      "description": "No description available",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Convention",
        "PR review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "TESTABILITY",
        "MAINTAINABILITY"
      ]
    },
    "C032": {
      "name": "Do not call external APIs in constructors or static blocks",
      "description": "No description available",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C033": {
      "name": "Separate processing logic and data access in the service layer",
      "description": "No description available",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Architectural review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C034": {
      "name": "Avoid directly accessing global state in domain logic",
      "description": "No description available",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analyzer",
        "Code review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS"
      ]
    },
    "C035": {
      "name": "Log all relevant context when handling errors",
      "description": "No description available",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Logging framework"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C036": {
      "name": "Do not throw generic exceptions like `RuntimeException` or `Exception`",
      "description": "No description available",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C037": {
      "name": "API handler functions should return a standardized response object (not raw strings)",
      "description": "No description available",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "API documentation tools"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C038": {
      "name": "Avoid logic that depends on file/module load order",
      "description": "No description available",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Architectural Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C039": {
      "name": "Do not store temporary data in global or static mutable fields",
      "description": "Prevent issues related to shared state and race conditions in concurrent environments. Ensure thread-safety and testability. Using global or static mutable fields can introduce hard-to-detect and hard-to-fix bugs.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C040": {
      "name": "Do not spread validation logic across multiple classes",
      "description": "Centralize validation logic to simplify maintenance, increase reusability, and ensure consistency. Centralized validation helps reduce bugs and simplifies updating validation rules.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Architectural Refactor Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C041": {
      "name": "Do not hardcode or push sensitive information (token, API key, secret, URL) into the repo",
      "description": "Protect sensitive application data, avoid security risks, and comply with security standards. Exposing sensitive information can lead to serious security and privacy issues.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Git Hooks",
        "Secret Scanner"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "C042": {
      "name": "Boolean variable names should start with `is`, `has`, or `should`",
      "description": "Ensure clarity and readability by making boolean variables self-explanatory. This naming convention improves code maintainability and documentation.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter (ESLint",
        "SonarQube)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C043": {
      "name": "Do not use `print` or `console.log` in production code",
      "description": "Ensure logging is done in a controlled and effective manner in production. Using `print` or `console.log` can lead to performance issues, security risks, and log management difficulties.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter",
        "Log Analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "C044": {
      "name": "Avoid reimplementing functions that already exist in standard libraries or helper utilities",
      "description": "Leverage well-tested, optimized, and community-maintained libraries to reduce bugs and improve development efficiency.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Package Manager",
        "Dependency Analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "C045": {
      "name": "APIs should not return 500 errors for known business errors",
      "description": "Ensure APIs return appropriate HTTP status codes so clients can handle errors effectively. HTTP 500 should be reserved for unexpected system errors.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "API Testing",
        "Error Monitoring"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C046": {
      "name": "Avoid complex and lengthy regular expressions in core logic",
      "description": "Keep code readable, maintainable, and efficient by avoiding the use of overly complex regular expressions in business-critical logic.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Code Review",
        "Static Code Analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "C047": {
      "name": "Retry logic must not be duplicated in multiple places",
      "description": "Centralize retry logic to improve consistency, maintainability, and observability of error handling and retry mechanisms.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Code Review",
        "Static Code Analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C048": {
      "name": "Do not bypass architectural layers (controller/service/repository)",
      "description": "Maintain a clear layered architecture, ensuring logic and data flow are well-structured and maintainable.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analyzer",
        "Architectural boundary checker"
      ],
      "framework": "All",
      "principles": [
        "DESIGN_PATTERNS",
        "MAINTAINABILITY"
      ]
    },
    "C049": {
      "name": "Always include a clear default case in switch/case statements",
      "description": "Avoid missing logic for unexpected values, increasing stability and safety of the application.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C050": {
      "name": "Do not call APIs in loops without batching or throttling",
      "description": "Prevent system overload, resource contention, API rate limit violations, or the backend being perceived as under attack (DDoS).",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Performance review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "C051": {
      "name": "Do not use `sleep`, `wait`, or `delay` in business logic",
      "description": "Avoid uncontrolled delays that cause asynchronous issues, make debugging and testing harder, and increase the risk of race conditions in production environments.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analyzer",
        "manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "C052": {
      "name": "Parsing or data transformation logic must be separated from controllers",
      "description": "Enforce separation of concerns — controllers should only handle requests and delegate processing, improving testability, maintainability, and reuse.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Code review / Architecture enforcement"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS",
        "MAINTAINABILITY"
      ]
    },
    "C053": {
      "name": "Avoid vague function names like \"handle\" or \"process\"",
      "description": "Clarify function behavior, reduce hidden logic, and improve code readability and traceability.",
      "category": "Common",
      "severity": "minor",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "AI reviewer / naming linter"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C054": {
      "name": "Do not process large datasets without pagination or lazy loading",
      "description": "Prevent loading all data into memory, avoid out-of-memory errors, and improve performance and response time.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Code review",
        "ORM warning",
        "API response profiler"
      ],
      "framework": "All",
      "principles": [
        "PERFORMANCE"
      ]
    },
    "C055": {
      "name": "Cache results of expensive functions if reused",
      "description": "Reduce processing time and resource usage by caching results of resource-heavy operations.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Code review",
        "performance profiler"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "C056": {
      "name": "Do not process large datasets without logging or resource monitoring",
      "description": "Track resource usage (CPU, RAM, I/O), detect anomalies early, and ensure system stability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Logging",
        "APM (Application Performance Monitoring)"
      ],
      "framework": "All",
      "principles": [
        "PERFORMANCE",
        "RELIABILITY"
      ]
    },
    "C057": {
      "name": "Use optimal data structures instead of arrays for frequent lookups",
      "description": "Reduce algorithm complexity, improve access speed, and optimize performance.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static analyzer",
        "AI reviewer"
      ],
      "framework": "All",
      "principles": [
        "PERFORMANCE"
      ]
    },
    "C058": {
      "name": "Enums must have clear display labels",
      "description": "Ensure enums shown in logs, UIs, or APIs are understandable and user-friendly.",
      "category": "Common",
      "severity": "minor",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C059": {
      "name": "Do not create abstractions just to group constants",
      "description": "Avoid unnecessary abstractions (class, enum) that add complexity without behavior or clear domain meaning.",
      "category": "Common",
      "severity": "minor",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "C060": {
      "name": "Do not override superclass methods and ignore critical logic",
      "description": "Preserve important behavior or lifecycle logic defined in the superclass to ensure correctness and prevent silent errors.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C061": {
      "name": "Write unit tests for business logic",
      "description": "Ensure that core business flows are verifiable, help catch bugs early, avoid regressions, and increase system reliability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "TESTABILITY",
        "MAINTAINABILITY"
      ]
    },
    "C062": {
      "name": "Interfaces or abstractions should not hold state",
      "description": "Keep interfaces focused on defining behavior, making them easier to mock, implement, and test.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS"
      ]
    },
    "C063": {
      "name": "Do not repeat the same test logic",
      "description": "Avoid duplication in tests, making them easier to maintain, read, and extend when business logic changes.",
      "category": "Common",
      "severity": "minor",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "TESTABILITY",
        "MAINTAINABILITY"
      ]
    },
    "C064": {
      "name": "Interfaces should expose only necessary behavior",
      "description": "Prevent leaking implementation details, improve encapsulation, and reduce coupling between modules.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS"
      ]
    },
    "C065": {
      "name": "Each test case should verify only one behavior",
      "description": "Make test failures easier to diagnose and ensure clarity and maintainability in test code.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "TESTABILITY"
      ]
    },
    "C066": {
      "name": "Test names should reflect what is being tested",
      "description": "Help readers quickly understand the purpose of a test, making the test suite self-documenting and easier to trace on failure.",
      "category": "Common",
      "severity": "minor",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "TESTABILITY"
      ]
    },
    "C067": {
      "name": "Do not hardcode configuration inside code",
      "description": "Improve configurability, reduce risk when changing environments, and make configuration management flexible and maintainable.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "C068": {
      "name": "Avoid unclear return types in functions",
      "description": "Help callers know what data they receive, enable type checking, reduce hidden errors, and improve predictability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C069": {
      "name": "Components should communicate via abstractions",
      "description": "Reduce module coupling, improve testability, ease mocking, and ensure replaceability without affecting callers.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS",
        "TESTABILITY"
      ]
    },
    "C070": {
      "name": "Tests should not rely on real time",
      "description": "Improve test stability and speed; avoid flaky tests caused by system clock or real-world timing.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "TESTABILITY"
      ]
    },
    "C071": {
      "name": "Test class names should reflect the corresponding module",
      "description": "Make it easy to identify the scope of testing, improve discoverability, and provide clear organization in the test structure.",
      "category": "Common",
      "severity": "minor",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "C072": {
      "name": "Each test should assert only one behavior",
      "description": "Reduce ambiguity when a test fails, ensuring each test case validates a single, specific logic path.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "TESTABILITY"
      ]
    },
    "C073": {
      "name": "All required configurations must be validated at startup",
      "description": "Prevent unclear runtime errors due to missing or incorrect config. Ensure the app fails fast if essential settings are absent.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C074": {
      "name": "Avoid magic numbers/values in code",
      "description": "Improve clarity and self-documentation in code, so readers can understand the meaning of values without additional context.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter (ESLint",
        "PMD",
        "Detekt",
        "etc.)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "C075": {
      "name": "All functions must explicitly declare return types",
      "description": "Improve clarity, predictability, and enforce strict type control to avoid silent errors during refactoring or logic changes.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Type checker",
        "Linter"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "C076": {
      "name": "All public functions must declare explicit types for arguments",
      "description": "Ensure type safety for function inputs, reduce runtime errors, and enable static analysis during compilation or code review.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Type checker",
        "Linter"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "D001": {
      "name": "Keep parameter names consistent when overriding methods",
      "description": "Maintain consistency between inherited classes",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`avoid_renaming_method_parameters`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D002": {
      "name": "Avoid using single cascade (..) operators",
      "description": "Write clear, readable code",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`avoid_single_cascade_in_expression_statements`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D003": {
      "name": "Avoid calling methods/accessing properties on dynamic types",
      "description": "Prevent runtime errors due to lack of type checking",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`avoid_dynamic_calls`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "D004": {
      "name": "Use standard `package:` imports",
      "description": "Reduce confusion in imports",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`always_use_package_imports`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D005": {
      "name": "Always declare function return types",
      "description": "Clarify logic and increase reliability in type checking",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`always_declare_return_types`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D006": {
      "name": "Do not override `==` and `hashCode` in mutable classes",
      "description": "Prevent logic errors when using mutable objects in collections.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`avoid_equals_and_hash_code_on_mutable_classes`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D007": {
      "name": "Do not pass default values when calling functions",
      "description": "Avoid redundancy and clarify intent",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`avoid_redundant_argument_values`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "D008": {
      "name": "Avoid slow async functions in `dart:io`",
      "description": "Optimize I/O performance",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`avoid_slow_async_io`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "D009": {
      "name": "Do not use throw or control flow in `finally`",
      "description": "Avoid unexpected behavior",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`control_flow_in_finally`",
        "`throw_in_finally`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D010": {
      "name": "Handle all cases when using `switch` with enums or enum-like classes",
      "description": "Avoid missing cases",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`exhaustive_cases`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D011": {
      "name": "Avoid importing `.dart` files from `lib/src` of other packages",
      "description": "Avoid unstable dependencies that cause breaking changes.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`implementation_imports`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "D012": {
      "name": "Avoid passing null to closure parameters",
      "description": "Prevent runtime exceptions",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`null_closures`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "D013": {
      "name": "Use adjacent strings or interpolation to create strings",
      "description": "Easier to read and more efficient",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`prefer_adjacent_string_concatenation`",
        "`prefer_interpolation_to_compose_strings`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "D014": {
      "name": "Use conditional assignment `??=` instead of `if-null-then-assign`",
      "description": "More concise and clear meaning",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`prefer_conditional_assignment`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "D015": {
      "name": "Use `final`, `const` for immutable variables",
      "description": "Prevent bugs from unintended value changes",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`prefer_final_fields`",
        "`prefer_const_declarations`",
        "`prefer_const_constructors`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D016": {
      "name": "Use explicit definitions for function types in parameters",
      "description": "Increase clarity and accurate type checking",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`use_function_type_syntax_for_parameters`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D017": {
      "name": "Ensure simple and correct Regex syntax",
      "description": "Prevent logic errors from invalid expressions",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`valid_regexps`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D018": {
      "name": "Use `rethrow` instead of `throw` when re-throwing errors",
      "description": "Preserve original error stack trace",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`use_rethrow_when_possible`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D019": {
      "name": "Use `isEmpty` / `isNotEmpty` for String, Iterable and Map",
      "description": "Clear meaning and better performance",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`prefer_is_empty`",
        "`prefer_is_not_empty`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D020": {
      "name": "Ensure valid URLs in `pubspec.yaml`",
      "description": "Avoid metadata errors and poor security",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`secure_pubspec_urls`)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "D021": {
      "name": "Use `BuildContext` synchronously",
      "description": "Prevent errors when `context` changes after `await`",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`flutter_lints` (`use_build_context_synchronously`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D022": {
      "name": "Place `child:` at the end when constructing widgets",
      "description": "Help readability of widget tree and UI structure",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`flutter_lints` (`sort_child_properties_last`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "D023": {
      "name": "Prefer using `contains` for `List` and `String`",
      "description": "Easier to read and more efficient",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`prefer_contains`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "D024": {
      "name": "Use `??` to convert `null` to `bool`",
      "description": "Write concisely and avoid null exceptions",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`dart lint` (`use_if_null_to_convert_nulls_to_bools`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "D025": {
      "name": "Include `Key` in Widget constructors",
      "description": "Help Flutter identify widgets, ensure efficient rebuilds and prevent errors when reordering widgets.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "dart"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`flutter_lints` (`use_key_in_widget_constructors`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "USABILITY",
        "PERFORMANCE"
      ]
    },
    "J001": {
      "name": "Use Null Object or Optional instead of repetitive null checks",
      "description": "Reduce the risk of NullPointerException (NPE) and avoid repeating `if (x != null)` throughout the code.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "java"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter",
        "PR guideline"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "J002": {
      "name": "Do not use `null` as a default value unless absolutely necessary",
      "description": "Prevent NullPointerException by promoting clearer use of Optional or nullable types.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "java"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "J003": {
      "name": "Every enum must provide a clear toString or description when used in UI/logs",
      "description": "Avoid unclear log messages such as `STATUS_1`, and improve readability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "java"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Enum Linter"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "J004": {
      "name": "Avoid creating enums/classes just to wrap fixed constants",
      "description": "Prevent unnecessary abstractions that clutter the codebase.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "java"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Review or static pattern detector"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "J005": {
      "name": "Always use `final` or `const` for variables that do not change",
      "description": "Clearly express intent and prevent unintended modifications.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "java"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter",
        "Static Analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "J006": {
      "name": "Do not override methods without calling `super` when required",
      "description": "Preserve expected behavior and side effects in inherited logic.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "java"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Linter",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K001": {
      "name": "Use Named Arguments when functions have more than 3 parameters",
      "description": "Improve readability, avoid errors from parameter order confusion, and make function calls clearer.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`NamedArguments`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K002": {
      "name": "Limit function complexity (Cyclomatic Complexity)",
      "description": "Reduce logic complexity and branching to improve readability, testability, and maintainability.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`CognitiveComplexMethod`",
        "`CyclomaticComplexMethod`)",
        "SonarQube"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "K003": {
      "name": "Avoid overly complex conditions",
      "description": "Write clear, readable conditions that are easy to control and understand.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ComplexCondition`)",
        "SonarQube"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "K004": {
      "name": "Avoid nesting code more than 4 levels deep in functions",
      "description": "Simplify logic to improve testability and maintainability.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`NestedBlockDepth`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K005": {
      "name": "Do not use `GlobalScope`",
      "description": "Avoid coroutines that exist beyond their intended lifecycle.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`GlobalCoroutineUsage`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K006": {
      "name": "Avoid using `suspend` when not necessary",
      "description": "Avoid creating the misconception that a function contains asynchronous logic when it actually doesn't need it.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`RedundantSuspendModifier`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "K007": {
      "name": "Use `delay()` instead of `sleep()` in coroutines",
      "description": "Optimize concurrency, avoid unnecessarily blocking threads.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`SleepInsteadOfDelay`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "K008": {
      "name": "Do not swallow `CancellationException` in coroutines",
      "description": "Ensure coroutine cancellation is properly propagated to avoid leaks or logic errors.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`SuspendFunSwallowedCancellation`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "K009": {
      "name": "Do not use `suspend` for functions returning `Flow`",
      "description": "Avoid unnecessary asynchronous declarations, keep code clean.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`SuspendFunWithFlowReturnType`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "K010": {
      "name": "Do not check/cast exceptions in `catch` blocks",
      "description": "Handle errors clearly, readably, and with the correct error type.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`InstanceOfCheckForException`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K011": {
      "name": "Use `class` instead of `object` when extending `Throwable`",
      "description": "Avoid using global singletons for exceptions, ensure exceptions carry separate information.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ObjectExtendsThrowable`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K012": {
      "name": "Do not `return` or `throw` in `finally`",
      "description": "Do not lose main logic when handling errors, avoid overriding original exceptions.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ReturnFromFinally`",
        "`ThrowingExceptionFromFinally`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K013": {
      "name": "Do not wrap and rethrow the same exception type",
      "description": "Preserve the original error cause and stack trace.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ThrowingNewInstanceOfSameException`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K014": {
      "name": "Use `ArrayPrimitive` instead of `Array<Primitive>`",
      "description": "Improve performance, avoid unnecessary boxing/unboxing.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ArrayPrimitive`)"
      ],
      "framework": "All",
      "principles": [
        "PERFORMANCE"
      ]
    },
    "K015": {
      "name": "Use `for` instead of `forEach` on ranges",
      "description": "Avoid creating unnecessary lambdas, improve runtime performance.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ForEachOnRange`)"
      ],
      "framework": "All",
      "principles": [
        "PERFORMANCE"
      ]
    },
    "K016": {
      "name": "Do not use `else` in `when` with `enum` or `sealed` classes",
      "description": "Ensure all cases are handled explicitly and are easy to control.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ElseCaseInsteadOfExhaustiveWhen`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K017": {
      "name": "Do not directly call Garbage Collector (GC)",
      "description": "Avoid poor performance or unpredictable behavior.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ExplicitGarbageCollectionCall`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "K018": {
      "name": "Do not ignore function return values",
      "description": "Avoid losing useful information, handle function results properly.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`IgnoredReturnValue`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K019": {
      "name": "Avoid using not-null assertion (!!) to get values from Map",
      "description": "Avoid `NullPointerException` when accessing Map.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`MapGetWithNotNullAssertionOperator`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K020": {
      "name": "Do not call `toString()` on nullable objects",
      "description": "Avoid displaying unwanted `\"null\"` strings.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`NullableToStringCall`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K021": {
      "name": "Avoid unreachable catch blocks",
      "description": "Remove redundant logic and unreachable code.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`UnreachableCatchBlock`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K022": {
      "name": "Avoid unsafe casting",
      "description": "Avoid `ClassCastException` and unnecessary runtime errors.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`UnsafeCast`",
        "`DontDowncastCollectionTypes`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K023": {
      "name": "Do not use properties before declaration",
      "description": "Avoid logic errors from using uninitialized variables.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`PropertyUsedBeforeDeclaration`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K024": {
      "name": "Ensure proper modifier order",
      "description": "Improve consistency and readability in the codebase.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "`detekt` (`ModifierOrder`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K025": {
      "name": "Ensure proper parameter order in Composable functions",
      "description": "Ensure usability, memorability, and extensibility of Composable APIs.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Custom rule",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K026": {
      "name": "Each component should serve a single purpose",
      "description": "Ensure components are easy to maintain, understand, and test.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Code Review",
        "Custom Lint"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS"
      ]
    },
    "K027": {
      "name": "Composables returning Unit should use PascalCase and be nouns",
      "description": "Follow naming conventions for Composables in Compose.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Custom rule",
        "Code Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K028": {
      "name": "`@Composable` factory functions that return values should use camelCase",
      "description": "Follow standard Kotlin function naming conventions.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Custom rule",
        "Code Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K029": {
      "name": "Prefer Stateless `@Composable` functions",
      "description": "Increase reusability, reduce complexity and side effects.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Custom rule",
        "Code Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K030": {
      "name": "Enhance extensibility by declaring state using interfaces",
      "description": "Improve extensibility, reduce coupling with specific implementations.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Code Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K031": {
      "name": "Create different components instead of multiple style classes",
      "description": "Increase maintainability and reusability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Code Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "K032": {
      "name": "Don't use `null` as default for nullable parameters",
      "description": "Avoid misleading default logic.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Custom rule",
        "Code Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "K033": {
      "name": "Don't pass `MutableState<T>` to `@Composable`",
      "description": "Prevent unclear state ownership sharing.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Custom rule",
        "Code Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS"
      ]
    },
    "K034": {
      "name": "Prefer `Slot` parameters for extensibility",
      "description": "Allow users to customize content flexibly.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "kotlin"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Custom rule",
        "Code Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "R001": {
      "name": "Components must be idempotent",
      "description": "Ensure that React components always return the same output for the same inputs (props, state, context).",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "R002": {
      "name": "Side effects must run outside of render",
      "description": "Prevent side effects from executing during render to avoid bugs and improve performance.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "DESIGN_PATTERNS",
        "PERFORMANCE"
      ]
    },
    "R003": {
      "name": "Props and state are immutable",
      "description": "Prevent direct mutation of props and state to avoid bugs and ensure proper behavior in React.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "R004": {
      "name": "Return values and arguments to Hooks are immutable",
      "description": "Ensure that values passed into Hooks are not modified to prevent subtle bugs.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "R005": {
      "name": "Values are immutable after being passed to JSX",
      "description": "Prevent mutation of values after they've been passed to JSX.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "R006": {
      "name": "Never call component functions directly",
      "description": "Let React fully control when and how components are rendered.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "DESIGN_PATTERNS"
      ]
    },
    "R007": {
      "name": "Never pass hooks as regular values",
      "description": "Ensure that Hooks are used only as intended within React components.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "DESIGN_PATTERNS"
      ]
    },
    "R008": {
      "name": "Only call Hooks at the top level",
      "description": "Maintain the correct order of Hook calls so React can manage state properly.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "DESIGN_PATTERNS"
      ]
    },
    "R009": {
      "name": "Only call Hooks from React functions",
      "description": "Ensure Hooks are only called from valid React functions to prevent unexpected behavior.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "typescript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [],
      "framework": "All",
      "principles": [
        "DESIGN_PATTERNS"
      ]
    },
    "S001": {
      "name": "Fail securely when access control errors occur",
      "description": "Ensure the system does not accidentally grant access when errors occur, helping to reduce the risk of unauthorized access and protect sensitive resources.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube (S4524)",
        "PMD (SecurityCodeGuidelines)",
        "Manual Review",
        "Unit Test"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S002": {
      "name": "Avoid IDOR vulnerabilities in CRUD operations",
      "description": "Prevent unauthorized access to sensitive data by verifying users' actual access rights, avoiding reliance solely on IDs in URLs.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube (S6142",
        "S2076)",
        "Semgrep (custom rule)",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S003": {
      "name": "URL redirects must be within an allow list",
      "description": "Prevent Open Redirect vulnerabilities, protecting users from being redirected to malicious pages through spoofed input.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Semgrep (custom rule)",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S004": {
      "name": "Do not log login credentials, payment information, and unencrypted tokens",
      "description": "Prevent leakage of sensitive information through log systems – a common attack vector if logs are shared, stored incorrectly, or exploited.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube (S2068",
        "S5334)",
        "Semgrep (custom rule)",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S005": {
      "name": "Do not use Origin header for authentication or access control",
      "description": "Prevent authentication or authorization decisions based on `Origin` header – which can be easily spoofed from the client side and is unreliable for security purposes.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Semgrep (custom rule)",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S006": {
      "name": "Do not send recovery or activation codes in plaintext",
      "description": "Prevent leakage of verification codes, recovery codes, or activation tokens if email/SMS is intercepted or exposed – thereby minimizing the risk of account takeover attacks.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Semgrep (custom rule)",
        "Secret Detection (regex scanner)",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S007": {
      "name": "Do not store OTP codes in plaintext",
      "description": "Protect the system from OTP reuse attacks if database/logs are accessed without authorization. OTP, magic-links, or reset codes must be treated like passwords – only stored in one-way hashed form, not recoverable.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Semgrep (custom rule)",
        "Secret Detection",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S008": {
      "name": "Encryption algorithms and parameters must support flexible configuration and upgrades (crypto agility)",
      "description": "Avoid binding the system to outdated cryptographic algorithms or parameters (like MD5, SHA-1, DES...), ensuring easy upgrades when standards change or new vulnerabilities emerge.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Semgrep (custom rule)",
        "Secret Scanners",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY",
        "SECURITY"
      ]
    },
    "S009": {
      "name": "Do not use insecure encryption modes, padding, or cryptographic algorithms",
      "description": "Prevent security vulnerabilities from using outdated encryption or hash algorithms, insecure padding/encryption modes leading to data exposure, pattern leakage, or padding oracle attacks.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube (S2070",
        "S4790",
        "S5547)",
        "Semgrep (crypto rules)",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S010": {
      "name": "Must use cryptographically secure random number generators (CSPRNG) for security purposes",
      "description": "Prevent attackers from guessing security random values like OTP, session ID, recovery tokens... by ensuring they are generated from Cryptographically Secure PRNG provided by cryptographic libraries/modules.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube (S2245)",
        "Semgrep (random-insecure)",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S011": {
      "name": "GUIDs used for security purposes must be generated according to UUID v4 standard with CSPRNG",
      "description": "Prevent guessing, recreation, or exploitation of GUIDs when used as identifiers for sensitive resources, by ensuring GUIDs are generated according to UUID v4 standard with cryptographically secure random number generators (CSPRNG).",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Semgrep (uuid version rules)",
        "Static Analyzer",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S012": {
      "name": "Protect secrets and encrypt sensitive data",
      "description": "Protect encryption keys, passwords, access tokens, API keys... from exposure through source code, `.env` files, or logs. Ensure sensitive data is always encrypted and keys are managed securely through Key Vault or HSM.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube (S2068",
        "S5547)",
        "GitLeaks",
        "TruffleHog",
        "Semgrep (hardcoded-secrets)",
        "Secret Scanner CI/CD"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S013": {
      "name": "Always use TLS for all connections",
      "description": "Protect data in transit from leakage and Man-In-The-Middle (MITM) attacks by requiring all connections to use TLS (HTTPS), not allowing fallback to unencrypted protocols like HTTP.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "OWASP ZAP",
        "SSLyze",
        "Lighthouse",
        "Static Analyzer (Semgrep/ESLint)",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S014": {
      "name": "Only use TLS 1.2 or 1.3",
      "description": "Protect network communication from attacks exploiting older TLS versions like BEAST, POODLE, Heartbleed, or downgrade attacks by only allowing TLS 1.2 or 1.3.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SSLyze",
        "testssl.sh",
        "OWASP ZAP",
        "Manual Review",
        "Configuration Scanner"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S015": {
      "name": "Only accept trusted TLS certificates and eliminate weak ciphers",
      "description": "Protect client-server connections from MITM attacks by only trusting valid TLS certificates signed by trusted CAs, and rejecting all unknown certificates or weak ciphers.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SSL Labs",
        "testssl.sh",
        "nmap ssl-enum-ciphers",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S016": {
      "name": "Do not pass sensitive data via query string",
      "description": "Prevent leakage of sensitive data through URLs by not passing sensitive information via query string, instead using HTTP body or headers in authenticated requests or private operations.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Semgrep (hardcoded query pattern)",
        "Manual Review",
        "Proxy log scanner",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S017": {
      "name": "Always use parameterized queries",
      "description": "Prevent various forms of injection (SQL Injection, HQL Injection, NoSQL Injection) by always using parameterized queries or ORM when accessing data.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube (S2077",
        "S3649)",
        "Semgrep (injection rules)",
        "CodeQL",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S018": {
      "name": "Prefer Allow List for Input Validation",
      "description": "Ensure all user inputs or external data sources are strictly validated by accepting only known good values. This reduces the risk of attacks like XSS, SQL Injection, and other security issues caused by malformed or unexpected input.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis (Semgrep",
        "SonarQube)",
        "Manual Review",
        "Input Validation Libraries"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S019": {
      "name": "Sanitize input before sending emails to prevent SMTP Injection",
      "description": "Prevent SMTP/IMAP injection by removing control characters and ensuring proper formatting of user input used in email sending.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Semgrep (regex match)",
        "Manual Review",
        "Static Analysis",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S020": {
      "name": "Avoid using `eval()` or executing dynamic code",
      "description": "Prevent Remote Code Execution (RCE) by disallowing use of dynamic code execution functions like `eval()`, `Function()`, `exec()`, `Runtime.exec()` with user-controlled input.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Semgrep (eval-detection rules)",
        "ESLint (`no-eval`)",
        "SonarQube (S1523)",
        "Static Analyzer"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S021": {
      "name": "Sanitize user-generated Markdown, CSS, and XSL content",
      "description": "Prevent script injection via user-generated content in Markdown, CSS, or XSL.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "DOMPurify",
        "sanitize-html",
        "markdown-it",
        "Bandit (Python)",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S022": {
      "name": "Escape data properly based on output context",
      "description": "Prevent XSS, Header Injection, Email Injection by escaping output data according to context (HTML, JS, URL, Header, Email, etc).",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint (`no-script-url`",
        "`react/no-danger`)",
        "Bandit",
        "SonarQube (S2076)",
        "DOMPurify",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S023": {
      "name": "Prevent JSON Injection and JSON eval attacks",
      "description": "Prevent JavaScript execution via unsafe JSON handling or injection attacks.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint (`no-eval`)",
        "Semgrep (`eval-dynamic`",
        "`json-injection`)",
        "Bandit",
        "SonarQube (S1523)",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S024": {
      "name": "Protect against XPath Injection and XML External Entity (XXE)",
      "description": "Prevent XPath injection and XXE vulnerabilities that can expose files, trigger SSRF, or run malicious code.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Semgrep (xpath injection)",
        "Bandit (Python)",
        "SonarQube (S2755)",
        "Manual Config Review"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S025": {
      "name": "Always validate client-side data on the server",
      "description": "Ensure all data from clients is validated server-side to prevent attacks from forged or malicious input.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube (S5334)",
        "ESLint (`require-validate`)",
        "Bandit (Python)",
        "Static Analysis"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S026": {
      "name": "Apply JSON Schema Validation to input data",
      "description": "Ensure all incoming JSON is fully validated by schema (structure, types, constraints) before processing.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "AJV",
        "jsonschema",
        "Joi",
        "Pydantic",
        "Hibernate Validator",
        "SonarQube (custom rule)",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S027": {
      "name": "Never expose secrets in source code or Git",
      "description": "Prevent leakage of credentials, API keys, tokens, or sensitive config via source code or version control.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "GitLeaks",
        "TruffleHog",
        "detect-secrets",
        "git-secrets",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S028": {
      "name": "Limit upload file size and number of files per user",
      "description": "Prevent resource abuse and protect against DoS attacks by limiting file size, number of files, and user storage usage.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis",
        "API Gateway Limit",
        "Nginx Config",
        "WAF",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S029": {
      "name": "Apply CSRF protection for authentication-related features",
      "description": "Prevent Cross-Site Request Forgery (CSRF) attacks where an attacker triggers unauthorized actions using the victim's authenticated session.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Spring Security CSRF",
        "Express `csurf`",
        "Django CSRF middleware",
        "Helmet.js",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S030": {
      "name": "Disable directory browsing and protect sensitive metadata files",
      "description": "Prevent unauthorized access to file listings or metadata files such as `.git`, `.env`, `.DS_Store`, which can reveal sensitive system or source code information.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "Manual Review",
        "Burp Suite",
        "Nikto",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S031": {
      "name": "Set the Secure flag on session cookies for HTTPS protection",
      "description": "Prevent attackers from stealing session cookies via unencrypted HTTP, especially on public or monitored networks (MITM).",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "OWASP ZAP",
        "Burp Suite",
        "Static Analysis",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S032": {
      "name": "Enable HttpOnly attribute for Session Cookies to prevent JavaScript access",
      "description": "Prevent JavaScript (including malicious code during XSS attacks) from accessing session cookies, thereby limiting the risk of theft and session hijacking.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "OWASP ZAP",
        "Burp Suite",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S033": {
      "name": "Set SameSite attribute for Session Cookies to reduce CSRF risk",
      "description": "Limit the browser's ability to automatically send cookies in cross-origin requests, thereby minimizing the risk of Cross-Site Request Forgery (CSRF) attacks.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "OWASP ZAP",
        "Postman",
        "Static Analysis",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S034": {
      "name": "Use `__Host-` prefix for Session Cookies to prevent subdomain sharing",
      "description": "Prevent cookie theft between subdomains (e.g., `api.example.com` accessing cookies from `admin.example.com`) by using cookies prefixed with `__Host-`, which enforce strict security tied to the root domain.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis",
        "Chrome DevTools Audit",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S035": {
      "name": "Set the `Path` attribute for Session Cookies to limit access scope",
      "description": "Reduce the risk of session cookie leaks or abuse across multiple apps under the same domain (e.g., `/app1` and `/app2`) by limiting cookie scope via the `Path` attribute.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "Manual Review",
        "Chrome DevTools",
        "Postman",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S036": {
      "name": "Prevent LFI and RFI using path validation and allow-lists",
      "description": "Block Local File Inclusion (LFI) and Remote File Inclusion (RFI) attacks where attackers access sensitive files (e.g., `/etc/passwd`, `C:\\Windows\\system32`) or execute code from external URLs.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "OWASP ZAP",
        "Burp Suite",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S037": {
      "name": "Set anti-cache headers to prevent sensitive data leakage",
      "description": "Prevent browsers from caching sensitive data such as tokens, personal information, or financial content which could leak when users share devices or use back/forward navigation.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "Postman",
        "Chrome DevTools",
        "Manual Review",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S038": {
      "name": "Hide system version information in HTTP Headers",
      "description": "Prevent attackers from discovering backend technologies (e.g., server, framework, OS) via HTTP response headers that can be used to target known vulnerabilities.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "curl",
        "Postman",
        "Chrome DevTools",
        "Burp Suite",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S039": {
      "name": "Never transmit Session Tokens via URL parameters",
      "description": "Prevent session hijacking by ensuring session tokens are not stored in browser history, server logs, proxy logs, or leaked via Referrer headers.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "Manual Review",
        "Burp Suite",
        "Postman",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S040": {
      "name": "Regenerate Session Token after login to prevent Session Fixation",
      "description": "Prevent attackers from setting a session ID before login and taking over the session post-login if the ID remains unchanged.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "Manual Review",
        "OWASP ZAP",
        "Burp Suite",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S041": {
      "name": "Session Tokens must be invalidated after logout or expiration",
      "description": "Prevent users from reusing old session tokens after logout or timeout, which could lead to session hijacking.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Static Analysis",
        "Manual Review",
        "Postman",
        "DevTools",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S042": {
      "name": "Require re-authentication for long-lived sessions or sensitive actions",
      "description": "Reduce the risk of session hijacking or privilege misuse by forcing re-authentication after long idle periods or before critical actions.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis (JWT expiry",
        "session policy)",
        "Security Test",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S043": {
      "name": "Password changes must invalidate all other login sessions",
      "description": "Ensure attackers cannot continue using old session tokens after a password change. Enforce correct access control after sensitive updates.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis (Token Revocation Logic)",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S044": {
      "name": "Require re-authentication before modifying critical information",
      "description": "Prevent unauthorized changes to critical information when the session is not fully authenticated. Protect users in half-open session states.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis (flow check)",
        "Security Test",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S045": {
      "name": "Implement brute-force protection for login",
      "description": "Prevent brute-force and credential stuffing attacks by limiting failed login attempts and introducing friction for suspicious behavior.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis",
        "OWASP ZAP",
        "Custom Logging",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S046": {
      "name": "Notify users of critical account changes",
      "description": "Alert users to sensitive actions to detect potential compromise and allow timely intervention.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Security Test",
        "Notification Audit",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S047": {
      "name": "Secure temporary passwords and activation codes",
      "description": "Ensure that temporary passwords and activation codes are secure, unpredictable, single-use, and time-limited.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis",
        "Audit Flow",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S048": {
      "name": "Do not expose current password during reset flow",
      "description": "Ensure the current user password is never revealed or sent in any step of the password reset process.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Penetration Test",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S049": {
      "name": "Authentication codes must expire quickly",
      "description": "Ensure that OTPs, reset tokens, and activation links expire quickly to reduce risk of interception or reuse.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S050": {
      "name": "Session tokens must have minimum 64-bit entropy and use secure algorithms",
      "description": "Prevent attackers from predicting or forging session tokens by ensuring sufficient length, entropy, and cryptographic safety.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S051": {
      "name": "Support 12–64 character passwords; reject >128 characters",
      "description": "Allow users to use strong passphrases while preventing resource abuse from excessively long inputs.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Static Analysis",
        "Unit Test",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S052": {
      "name": "OTPs must have at least 20-bit entropy",
      "description": "Ensure OTPs are strong enough to resist brute-force or statistical guessing attacks.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Unit Test",
        "Static Analysis",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S053": {
      "name": "Only use secure OTP algorithms like HOTP/TOTP",
      "description": "Ensure OTPs are secure against spoofing and replay attacks by using safe, standard algorithms.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Unit Test",
        "Static Analysis",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S054": {
      "name": "Avoid using default accounts like \"admin\", \"root\", \"sa\"",
      "description": "Prevent brute-force attacks and ensure traceability and accountability in auditing. Avoid predictable, shared accounts lacking identity association.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "CI Security Audit",
        "IAM Policy Scan",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S055": {
      "name": "Validate input Content-Type in REST services",
      "description": "Prevent attacks via malformed or improperly handled data by validating incoming data format (e.g., JSON, XML).",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "API Gateway Config",
        "Static Code Analysis (Semgrep)",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S056": {
      "name": "Protect against Log Injection attacks",
      "description": "Prevent attackers from injecting fake log entries that distort tracking or exploit log analysis systems.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube",
        "Semgrep",
        "Manual Review"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S057": {
      "name": "Use synchronized time and UTC in logs",
      "description": "Ensure consistent, accurate log timestamps to support auditing, investigation, and cross-system comparison.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Review",
        "Audit Logging Middleware",
        "Centralized Logging Tools (ELK",
        "Fluentd",
        "Datadog)",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "S058": {
      "name": "Protect applications from SSRF attacks",
      "description": "Prevent Server-Side Request Forgery (SSRF) and protect internal networks or cloud metadata services from unauthorized access via untrusted input.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SonarQube",
        "Manual Review",
        "Burp Suite Test"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "S059": {
      "name": "Configure Allow List for server-side outbound requests",
      "description": "Reduce risks from the server making outbound requests to untrusted systems (SSRF, malicious downloads, data leaks).",
      "category": "Common",
      "severity": "major",
      "languages": [
        "All languages"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "Manual Config Review",
        "Firewall/Proxy Logs",
        "CloudTrail",
        "Burp Suite Test",
        "SonarQube (custom rule)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "SW001": {
      "name": "Use Swift's observe property instead of legacy KVO",
      "description": "Avoid using outdated KVO mechanisms.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`block_based_kvo`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW002": {
      "name": "Delegate Protocols must be class-only",
      "description": "Allow the use of `weak` to avoid retain cycles (memory leaks).",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`class_delegate_protocol`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW003": {
      "name": "Do not directly instantiate system protocols",
      "description": "Avoid misusing protocols like `ExpressibleByArrayLiteral`.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`compiler_protocol_init`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW004": {
      "name": "Prefer `.contains` for certain filtering operations",
      "description": "Improve performance and clarity.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`contains_over_*`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "SW005": {
      "name": "Use `enum` for types with only static members",
      "description": "Prevent unnecessary instantiation.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`convenience_type`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW006": {
      "name": "Always dispose NotificationCenter observers",
      "description": "Prevent memory leaks due to retain cycles.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`discarded_notification_center_observer`)"
      ],
      "framework": "All",
      "principles": [
        "PERFORMANCE"
      ]
    },
    "SW007": {
      "name": "Avoid direct instantiation of system types",
      "description": "Prevent creating types that may cause errors or are unnecessary.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`discouraged_direct_init`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW008": {
      "name": "Do not use optionals for Boolean values",
      "description": "Avoid ambiguous logic and hard-to-control conditions.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`discouraged_optional_boolean`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW009": {
      "name": "Prefer `.isEmpty` over `.count == 0`",
      "description": "Make code clearer and more efficient.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`empty_count`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW010": {
      "name": "Prefer `isEmpty` over comparing to `\"\"`",
      "description": "Increase clarity and avoid potential errors with empty strings.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`empty_string`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW011": {
      "name": "Do not use `.init()` unnecessarily",
      "description": "Increase code clarity.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`explicit_init`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW012": {
      "name": "Always provide a clear message when using `fatalError`",
      "description": "Make it easier to trace application crashes.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`fatal_error_message`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW013": {
      "name": "Prefer `for-where` over `if` inside loops",
      "description": "Make code clearer and express intent.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`for_where`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW014": {
      "name": "Avoid `as!` (force cast)",
      "description": "Prevent crashes due to incorrect type casting.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`force_cast`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "SW015": {
      "name": "Avoid `try!` (force try)",
      "description": "Prevent crashes when errors occur.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`force_try`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "SECURITY"
      ]
    },
    "SW016": {
      "name": "Avoid using `!` (force unwrap)",
      "description": "Prevent crashes caused by `nil` values.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`force_unwrapping`)"
      ],
      "framework": "All",
      "principles": [
        "SECURITY"
      ]
    },
    "SW017": {
      "name": "Limit function parameters to less than 6",
      "description": "Improve readability and reduce complexity.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`function_parameter_count`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW018": {
      "name": "Do not use tuples with too many elements",
      "description": "Reduce complexity, improve readability and maintainability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`large_tuple`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW019": {
      "name": "Use Swift initializers instead of Objective-C style",
      "description": "Keep Swift code pure, clear, and maintainable.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`legacy_constructor`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW020": {
      "name": "Data types should be nested at most 1 level",
      "description": "Avoid unreadable and hard-to-debug code due to deep nesting.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`nesting`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW021": {
      "name": "Do not use access modifiers with extensions",
      "description": "Keep extensions clear and consistent.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`no_extension_access_modifier`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "MAINTAINABILITY"
      ]
    },
    "SW022": {
      "name": "Call `super` in lifecycle methods",
      "description": "Ensure default behaviors are executed correctly.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`overridden_super_call`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW023": {
      "name": "Do not use `override` in extensions",
      "description": "Avoid changing original behavior and keep extensions for extension only.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`override_in_extension`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW024": {
      "name": "Prefer `private` over `fileprivate`",
      "description": "Restrict access scope more tightly.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`private_over_fileprivate`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW025": {
      "name": "Do not declare Unit Test functions as `private`",
      "description": "Ensure tests are executed from the test target.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`private_unit_test`)"
      ],
      "framework": "All",
      "principles": [
        "TESTABILITY"
      ]
    },
    "SW026": {
      "name": "Do not call `super` in specific methods",
      "description": "Avoid errors from unnecessary `super` calls.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`prohibited_super_call`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW027": {
      "name": "Prefer `.min()` or `.max()` over `sorted().first/last`",
      "description": "Improve performance and clarity.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`sorted_first_last`)"
      ],
      "framework": "All",
      "principles": [
        "PERFORMANCE"
      ]
    },
    "SW028": {
      "name": "Prefer shorthand syntax `[T]` over `Array<T>`",
      "description": "Make code more idiomatic and concise.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`syntactic_sugar`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW029": {
      "name": "Warn for unused closure parameters",
      "description": "Avoid compile warnings and improve readability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`unused_closure_parameter`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW030": {
      "name": "Avoid using `enumerated()` when index is not needed",
      "description": "Remove redundant code and avoid performance risks.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`unused_enumerated`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW031": {
      "name": "Do not use optional binding just to call a function or property",
      "description": "Increase clarity and avoid deep nesting.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`unused_optional_binding`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW032": {
      "name": "Do not use `@IBInspectable` with unsupported types and constants",
      "description": "Prevent crashes or compile-time errors.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`valid_ibinspectable`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW033": {
      "name": "Parameters must be vertically aligned when calling functions",
      "description": "Improve readability and maintain consistent code style.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`vertical_parameter_alignment_on_call`",
        "`vertical_parameter_alignment`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW034": {
      "name": "Use `-> Void` instead of `-> ()` for function types",
      "description": "Increase consistency and readability.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`void_return`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "SW035": {
      "name": "Delegates must be marked as `weak`",
      "description": "Prevent retain cycles and memory leaks.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "swift"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "SwiftLint (`weak_delegate`)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY",
        "PERFORMANCE"
      ]
    },
    "T002": {
      "name": "Interface names should start with 'I'",
      "description": "Ensure interface names follow naming conventions with 'I' prefix.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint custom rule (custom/t002)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T003": {
      "name": "Avoid using @ts-ignore without a clear justification",
      "description": "Avoid using @ts-ignore without a clear reason.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint custom rule (custom/t003)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T004": {
      "name": "Disallow declaring empty types like `type X = {}`",
      "description": "Avoid declaring meaningless empty data types.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint custom rule (custom/t004)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T007": {
      "name": "Avoid declaring functions inside constructors or class bodies",
      "description": "Avoid declaring functions inside constructors or class bodies.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint custom rule (custom/t007)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T010": {
      "name": "Avoid deeply nested union or tuple types",
      "description": "Avoid complex nested union or tuple types.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint custom rule (custom/t010)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T015": {
      "name": "Do not use `instanceof` to distinguish behavior when interfaces are available",
      "description": "Use polymorphism instead of branching with type checks.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0.0",
      "status": "draft",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "AI review / static analyzer"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T016": {
      "name": "Use strict type checking",
      "description": "Leverage TypeScript's type safety to reduce runtime errors.",
      "category": "Common",
      "severity": "critical",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "TypeScript compiler",
        "ESLint"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T017": {
      "name": "Use async/await instead of Promises",
      "description": "Improve code readability and ease debugging of async operations.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint",
        "Prettier"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T018": {
      "name": "Use proper error handling",
      "description": "Ensure robust error handling and good user experience.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint",
        "Custom error libraries"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T019": {
      "name": "Do not assign to this arbitrarily",
      "description": "Maintain proper context and avoid this manipulation.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint custom rule (custom/t019)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T020": {
      "name": "Avoid export default for multi-responsibility modules",
      "description": "Improve tree-shaking and module clarity.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint custom rule (custom/t020)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    },
    "T021": {
      "name": "Limit deeply nested generics",
      "description": "Improve code readability and TypeScript performance.",
      "category": "Common",
      "severity": "major",
      "languages": [
        "javascript"
      ],
      "version": "1.0",
      "status": "activated",
      "tags": [
        "Common",
        "readability",
        "code-quality"
      ],
      "tools": [
        "ESLint custom rule (custom/t021)"
      ],
      "framework": "All",
      "principles": [
        "CODE_QUALITY"
      ]
    }
  }
}