// AUTO-GENERATED: Do not edit by hand.
// Generated by scripts/generate-moonshine-rule-registry.mjs

use std::collections::HashMap;
use crate::wasm_safe_linter::LintSeverity;
use super::engine::{MoonShineRule, MoonShineRuleCategory, RuleImplementation};

/// Registers all auto-generated rules from JS references (SunLint / Moonshine).
pub fn register_rules(rules: &mut HashMap<String, MoonShineRule>) {
    rules.insert("C002".to_string(), MoonShineRule {
        id: "C002".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C002_no_duplicate_code - Enhanced Regex-based Rule Analyzer".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C002".to_string(), MoonShineRule {
        id: "C002".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Detect duplicate code blocks longer than 10 lines".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C003".to_string(), MoonShineRule {
        id: "C003".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C003_no_vague_abbreviations - Enhanced Regex-based Rule Analyzer".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C003".to_string(), MoonShineRule {
        id: "C003".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Clear variable names, avoid arbitrary abbreviations".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C006".to_string(), MoonShineRule {
        id: "C006".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "SMART C006 ANALYZER - INTELLIGENT FUNCTION NAMING ANALYSIS".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C010".to_string(), MoonShineRule {
        id: "C010".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C010 Main Analyzer - Block Nesting Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C010".to_string(), MoonShineRule {
        id: "C010".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Regex-based analyzer for C010 - Block Nesting Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C010".to_string(), MoonShineRule {
        id: "C010".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Symbol-based analyzer for C010 - Block Nesting Detection using AST".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C010".to_string(), MoonShineRule {
        id: "C010".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Không nên có hơn 3 cấp lồng nhau (nested block)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C012".to_string(), MoonShineRule {
        id: "C012".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C012 Heuristic Analyzer - Command Query Separation".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C012".to_string(), MoonShineRule {
        id: "C012".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C012 AST Analyzer - Command Query Separation".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C013".to_string(), MoonShineRule {
        id: "C013".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Symbol-based analyzer for C013 - No Dead Code".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C013".to_string(), MoonShineRule {
        id: "C013".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Regex-based analyzer for C013 - No Dead Code".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C013".to_string(), MoonShineRule {
        id: "C013".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Symbol-based analyzer for C013 - No Dead Code".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C013".to_string(), MoonShineRule {
        id: "C013".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Do not leave dead code commented out".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C014".to_string(), MoonShineRule {
        id: "C014".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C014".to_string(), MoonShineRule {
        id: "C014".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "', '*".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C014".to_string(), MoonShineRule {
        id: "C014".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Use Dependency Injection instead of direct instantiation".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C017".to_string(), MoonShineRule {
        id: "C017".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C017".to_string(), MoonShineRule {
        id: "C017".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C017 Constructor Logic - Semantic Analyzer (Phase 2)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C017".to_string(), MoonShineRule {
        id: "C017".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Limit constructor logic".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C018".to_string(), MoonShineRule {
        id: "C018".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C018 Main Analyzer - Do not throw generic errors".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C018".to_string(), MoonShineRule {
        id: "C018".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C018 Regex-based Analyzer - Do not throw generic errors".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C018".to_string(), MoonShineRule {
        id: "C018".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C018 Symbol-based Analyzer - Advanced Do not throw generic errors".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C018".to_string(), MoonShineRule {
        id: "C018".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Do not throw generic errors, always use specific messages".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C019".to_string(), MoonShineRule {
        id: "C019".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C019".to_string(), MoonShineRule {
        id: "C019".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C019".to_string(), MoonShineRule {
        id: "C019".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C019 System Log Analyzer - Simplified Version".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C023".to_string(), MoonShineRule {
        id: "C023".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C023 Main Analyzer - Do not declare duplicate variable".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C023".to_string(), MoonShineRule {
        id: "C023".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C023 Symbol-based Analyzer - Advanced Do not declare duplicate variable".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C023".to_string(), MoonShineRule {
        id: "C023".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Do not use duplicate variable names in the same scope".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C024".to_string(), MoonShineRule {
        id: "C024".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C024 Main Analyzer - Do not scatter hardcoded constants throughout the logic".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C024".to_string(), MoonShineRule {
        id: "C024".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "[SYMBOL-BASED] Hardcoded constants should be defined in a single place to improve maintainability.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C029".to_string(), MoonShineRule {
        id: "C029".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C029 Smart Pipeline Analyzer".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C029".to_string(), MoonShineRule {
        id: "C029".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C029 Analyzer - Smart Pipeline Integration".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C029".to_string(), MoonShineRule {
        id: "C029".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Every `catch` block must log the error cause (C029)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C030".to_string(), MoonShineRule {
        id: "C030".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Rule C030 - Use Custom Error Classes".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C030".to_string(), MoonShineRule {
        id: "C030".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Use custom error classes instead of generic Error class".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C031".to_string(), MoonShineRule {
        id: "C031".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Rule C031 - Validation Logic Separation".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C033".to_string(), MoonShineRule {
        id: "C033".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C033 Main Analyzer - Symbol-based with minimal regex fallback".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C033".to_string(), MoonShineRule {
        id: "C033".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Regex-based analyzer for: C033 – Tách logic xử lý và truy vấn dữ liệu trong service layer".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C033".to_string(), MoonShineRule {
        id: "C033".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Symbol-based analyzer for C033 - Advanced semantic analysis".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C035".to_string(), MoonShineRule {
        id: "C035".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C035 Main Analyzer - Error Logging Context Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C035".to_string(), MoonShineRule {
        id: "C035".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C035 Regex-based Analyzer - Basic Error Logging Context Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C035".to_string(), MoonShineRule {
        id: "C035".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C035 Symbol-based Analyzer - Advanced Error Logging Context Analysis".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C035".to_string(), MoonShineRule {
        id: "C035".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "No empty catch blocks (without error handling or logging)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C040".to_string(), MoonShineRule {
        id: "C040".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C040 Main Analyzer - Symbol-based with minimal regex fallback".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C040".to_string(), MoonShineRule {
        id: "C040".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Regex-based analyzer for: C040 - Centralized Validation Logic".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C040".to_string(), MoonShineRule {
        id: "C040".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Symbol-based analyzer for C040 - Centralized Validation Logic Analysis".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C041".to_string(), MoonShineRule {
        id: "C041".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C041".to_string(), MoonShineRule {
        id: "C041".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C041".to_string(), MoonShineRule {
        id: "C041".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "No hardcoded sensitive information".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C042".to_string(), MoonShineRule {
        id: "C042".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for: C042 – Boolean variable names should start with proper prefixes".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C042".to_string(), MoonShineRule {
        id: "C042".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Boolean variable names should start with `is`, `has`, or `should`".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C043".to_string(), MoonShineRule {
        id: "C043".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "AST-based C043 Analyzer".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C043".to_string(), MoonShineRule {
        id: "C043".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Do not use `console.log` or `print` in production code".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C047".to_string(), MoonShineRule {
        id: "C047".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for: C047 – Logic retry không được viết lặp lại nhiều nơi".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C047".to_string(), MoonShineRule {
        id: "C047".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C047 Semantic Rule - Adapted for Shared Symbol Table".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C047".to_string(), MoonShineRule {
        id: "C047".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Configuration for Symbol-Based Analysis of retry functions".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C047".to_string(), MoonShineRule {
        id: "C047".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Logic retry không được viết lặp lại nhiều nơi - use centralized retry utility instead".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C048".to_string(), MoonShineRule {
        id: "C048".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C048 Main Analyzer - Do not bypass architectural layers (controller/service/repository)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C048".to_string(), MoonShineRule {
        id: "C048".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C048 Symbol-based Analyzer - Advanced Do not bypass architectural layers (controller/service/repository)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C052".to_string(), MoonShineRule {
        id: "C052".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C052 Main Analyzer - Parsing or data transformation logic must be separated from controllers".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C052".to_string(), MoonShineRule {
        id: "C052".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C052 Symbol-based Analyzer - Advanced Parsing or data transformation logic must be separated from controllers".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C067".to_string(), MoonShineRule {
        id: "C067".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C067".to_string(), MoonShineRule {
        id: "C067".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C070".to_string(), MoonShineRule {
        id: "C070".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C070 - Tests Should Not Depend on Real Time".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C070".to_string(), MoonShineRule {
        id: "C070".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C070 - Tests Should Not Depend on Real Time".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C072".to_string(), MoonShineRule {
        id: "C072".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C072 Rule: Each test should assert only one behavior".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C072".to_string(), MoonShineRule {
        id: "C072".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Each test should assert only one behavior (Single Assert Rule)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C073".to_string(), MoonShineRule {
        id: "C073".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C073".to_string(), MoonShineRule {
        id: "C073".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C075".to_string(), MoonShineRule {
        id: "C075".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C075 Rule: Functions must have explicit return type declarations".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C075".to_string(), MoonShineRule {
        id: "C075".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "Functions must have explicit return type declarations".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C076".to_string(), MoonShineRule {
        id: "C076".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C076 Main Analyzer - Explicit Function Argument Types".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("C076".to_string(), MoonShineRule {
        id: "C076".to_string(),
        category: MoonShineRuleCategory::CodeQuality,
        severity: LintSeverity::Warning,
        description: "C076 Semantic Analyzer - Explicit Function Argument Types".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S001".to_string(), MoonShineRule {
        id: "S001".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S001 – Verify that if there is an error in access control, the system fails securely".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S002".to_string(), MoonShineRule {
        id: "S002".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "ESLint rule: S002 – IDOR Check".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S003".to_string(), MoonShineRule {
        id: "S003".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Prevent unvalidated redirects to user-controlled URLs".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S005".to_string(), MoonShineRule {
        id: "S005".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Hybrid analyzer for S005 - No Origin Header Authentication".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S005".to_string(), MoonShineRule {
        id: "S005".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "AST-based analyzer for S005 - No Origin Header Authentication".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S005".to_string(), MoonShineRule {
        id: "S005".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Do not use the Origin header to make authentication or access control decisions.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S006".to_string(), MoonShineRule {
        id: "S006".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for S006 - No Plaintext Recovery/Activation Codes".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S006".to_string(), MoonShineRule {
        id: "S006".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Disallow sending activation or recovery secrets in plaintext to the user (e.g., via email/SMS). Use secure channels or one-time tokens.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S007".to_string(), MoonShineRule {
        id: "S007".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for S007 - No Plaintext OTP".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S007".to_string(), MoonShineRule {
        id: "S007".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S007 Semantic Analyzer - No Plaintext OTP".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S007".to_string(), MoonShineRule {
        id: "S007".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S007 Semantic Wrapper".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S007".to_string(), MoonShineRule {
        id: "S007".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "ESLint rule: S007 – Plaintext OTP Check".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S008".to_string(), MoonShineRule {
        id: "S008".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure cryptographic algorithms, key lengths, and modes are not hardcoded and can be configured or upgraded easily.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S009".to_string(), MoonShineRule {
        id: "S009".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for S009 - No Insecure Encryption Modes, Padding, or Cryptographic Algorithms".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S009".to_string(), MoonShineRule {
        id: "S009".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Disallow use of insecure cryptographic algorithms, cipher modes, paddings, and hash functions".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S010".to_string(), MoonShineRule {
        id: "S010".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for S010 - Must use cryptographically secure random number generators (CSPRNG)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S010".to_string(), MoonShineRule {
        id: "S010".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Disallow insecure random generators (Math.random, UUID, etc.) for sensitive values like tokens, passwords".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S011".to_string(), MoonShineRule {
        id: "S011".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Disallow use of UUID.randomUUID() for sensitive identifiers. Use SecureRandom-based UUIDs instead.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S012".to_string(), MoonShineRule {
        id: "S012".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Do not hardcode any secrets (API keys, passwords, cryptographic keys) in the source code.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S013".to_string(), MoonShineRule {
        id: "S013".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure all client connections use TLS (HTTPS) and prevent unencrypted (HTTP) connections.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S014".to_string(), MoonShineRule {
        id: "S014".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure that only secure versions of TLS are enabled. Do not use SSLv3, TLS 1.0, or TLS 1.1.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S015".to_string(), MoonShineRule {
        id: "S015".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Hybrid analyzer for S015 - Insecure TLS Certificate Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S015".to_string(), MoonShineRule {
        id: "S015".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "AST-based analyzer for S015 - Insecure TLS Certificate Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S015".to_string(), MoonShineRule {
        id: "S015".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure only trusted TLS certificates are used. Reject self-signed, expired, or untrusted certificates unless explicitly allowed for internal use.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S016".to_string(), MoonShineRule {
        id: "S016".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S016 Main Analyzer - Sensitive Data in URL Query Parameters Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S016".to_string(), MoonShineRule {
        id: "S016".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S016 Regex-based Analyzer - Sensitive Data in URL Query Parameters Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S016".to_string(), MoonShineRule {
        id: "S016".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S016 Symbol-based Analyzer - Sensitive Data in URL Query Parameters Detection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S016".to_string(), MoonShineRule {
        id: "S016".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Detect sensitive parameters passed via query string.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S017".to_string(), MoonShineRule {
        id: "S017".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Uses symbol-based and regex analysis to detect SQL injection vulnerabilities".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S017".to_string(), MoonShineRule {
        id: "S017".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Uses regex patterns and AST analysis to detect SQL injection vulnerabilities".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S017".to_string(), MoonShineRule {
        id: "S017".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Uses semantic analysis to detect SQL injection vulnerabilities".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S017".to_string(), MoonShineRule {
        id: "S017".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Verify that data selection or database queries use parameterized queries, ORMs, entity frameworks, or are otherwise protected from database injection attacks".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S018".to_string(), MoonShineRule {
        id: "S018".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure input validation uses allow lists (whitelisting), not deny lists (blacklisting) wherever possible.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S019".to_string(), MoonShineRule {
        id: "S019".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure user input is sanitized before use in mail functions".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S020".to_string(), MoonShineRule {
        id: "S020".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Avoid eval() and dynamic code execution to prevent RCE vulnerabilities".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S022".to_string(), MoonShineRule {
        id: "S022".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure HTML output is properly encoded to prevent XSS.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S023".to_string(), MoonShineRule {
        id: "S023".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for: S023 – No JSON Injection".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S023".to_string(), MoonShineRule {
        id: "S023".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S023".to_string(), MoonShineRule {
        id: "S023".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Prevent JSON injection attacks and unsafe JSON handling".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S024".to_string(), MoonShineRule {
        id: "S024".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S024 Main Analyzer - Protect against XPath Injection and XML External Entity (XXE)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S024".to_string(), MoonShineRule {
        id: "S024".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S024 Regex-Based Analyzer - Protect against XPath Injection and XML External Entity (XXE)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S024".to_string(), MoonShineRule {
        id: "S024".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S024 Symbol-Based Analyzer - Protect against XPath Injection and XML External Entity (XXE)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S025".to_string(), MoonShineRule {
        id: "S025".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S025 Main Analyzer - Always validate client-side data on the server".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S025".to_string(), MoonShineRule {
        id: "S025".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S025 Regex-Based Analyzer - Always validate client-side data on the server".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S025".to_string(), MoonShineRule {
        id: "S025".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S025 Symbol-Based Analyzer - Always validate client-side data on the server".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S025".to_string(), MoonShineRule {
        id: "S025".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure all client input is validated on server-side before processing in NestJS applications".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S026".to_string(), MoonShineRule {
        id: "S026".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for: S026 – JSON Schema Validation cho dữ liệu đầu vào".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S026".to_string(), MoonShineRule {
        id: "S026".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure JSON schema validation is in place for input objects".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S027".to_string(), MoonShineRule {
        id: "S027".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S027".to_string(), MoonShineRule {
        id: "S027".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S027".to_string(), MoonShineRule {
        id: "S027".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Prevent hardcoded passwords, API keys, and secrets".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S029".to_string(), MoonShineRule {
        id: "S029".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S029".to_string(), MoonShineRule {
        id: "S029".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure CSRF protection is applied to route handlers".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S030".to_string(), MoonShineRule {
        id: "S030".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Prevent directory browsing and metadata file disclosure".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S031".to_string(), MoonShineRule {
        id: "S031".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S031 Main Analyzer - Set Secure flag for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S031".to_string(), MoonShineRule {
        id: "S031".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S031 Regex-Based Analyzer - Set Secure flag for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S031".to_string(), MoonShineRule {
        id: "S031".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S031 Symbol-Based Analyzer - Set Secure flag for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S032".to_string(), MoonShineRule {
        id: "S032".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S032 Main Analyzer - Set HttpOnly attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S032".to_string(), MoonShineRule {
        id: "S032".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S032 Regex-Based Analyzer - Set HttpOnly attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S032".to_string(), MoonShineRule {
        id: "S032".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S032 Symbol-Based Analyzer - Set HttpOnly attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S033".to_string(), MoonShineRule {
        id: "S033".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S033 Main Analyzer - Set SameSite attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S033".to_string(), MoonShineRule {
        id: "S033".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S033 Regex-Based Analyzer - Set SameSite attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S033".to_string(), MoonShineRule {
        id: "S033".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S033 Symbol-Based Analyzer - Set SameSite attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S033".to_string(), MoonShineRule {
        id: "S033".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure SameSite is set when using cookies to prevent CSRF".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S034".to_string(), MoonShineRule {
        id: "S034".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S034 Main Analyzer - Use __Host- prefix for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S034".to_string(), MoonShineRule {
        id: "S034".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S034 Regex-based Analyzer - Use __Host- prefix for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S034".to_string(), MoonShineRule {
        id: "S034".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S034 Symbol-based Analyzer - Use __Host- prefix for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S034".to_string(), MoonShineRule {
        id: "S034".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure cookies use the '__Host-' prefix for secure session cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S035".to_string(), MoonShineRule {
        id: "S035".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S035 Main Analyzer - Set Path attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S035".to_string(), MoonShineRule {
        id: "S035".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S035 Regex-based Analyzer - Set Path attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S035".to_string(), MoonShineRule {
        id: "S035".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "S035 Symbol-Based Analyzer - Set Path attribute for Session Cookies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S035".to_string(), MoonShineRule {
        id: "S035".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure cookies use a specific path (not `/`) to reduce exposure to sibling apps under same domain".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S036".to_string(), MoonShineRule {
        id: "S036".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Detect possible Local/Remote File Inclusion vulnerabilities".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S037".to_string(), MoonShineRule {
        id: "S037".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure anti-cache headers are set to prevent sensitive data caching".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S038".to_string(), MoonShineRule {
        id: "S038".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Prevent exposing version info via HTTP headers or response bodies".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S039".to_string(), MoonShineRule {
        id: "S039".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure session tokens are not exposed in URL query parameters".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S041".to_string(), MoonShineRule {
        id: "S041".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure logout handlers properly invalidate session tokens and prevent session reuse".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S042".to_string(), MoonShineRule {
        id: "S042".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure periodic re-authentication is implemented for long-lived sessions".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S043".to_string(), MoonShineRule {
        id: "S043".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure password change methods terminate all other active sessions and require re-authentication".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S044".to_string(), MoonShineRule {
        id: "S044".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Require full session validation or re-authentication before sensitive operations".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S045".to_string(), MoonShineRule {
        id: "S045".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure anti-automation controls are in place (rate limiting, CAPTCHA, account lockout, etc.).".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S046".to_string(), MoonShineRule {
        id: "S046".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure secure notification is sent on authentication changes (password reset, email/phone change, new device login, etc.).".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S047".to_string(), MoonShineRule {
        id: "S047".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Initial passwords or activation codes must be securely generated, at least 6 characters, expire soon, and not reused long-term.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S048".to_string(), MoonShineRule {
        id: "S048".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for S048 - No Current Password in Reset Process".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S048".to_string(), MoonShineRule {
        id: "S048".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure password recovery does not reveal the current password. Users must set a new password via a secure, one-time token.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S050".to_string(), MoonShineRule {
        id: "S050".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Avoid using weak hash algorithms or low entropy sources for session tokens. Use crypto.randomBytes(16), HMAC, or SHA-256.".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S052".to_string(), MoonShineRule {
        id: "S052".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure secure random number generation with sufficient entropy".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S054".to_string(), MoonShineRule {
        id: "S054".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Disallow use of default accounts without value check".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S055".to_string(), MoonShineRule {
        id: "S055".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Heuristic analyzer for S055 - Content-Type Validation in REST Services".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S055".to_string(), MoonShineRule {
        id: "S055".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Ensure REST request handlers validate Content-Type when using req.body".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S057".to_string(), MoonShineRule {
        id: "S057".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S057".to_string(), MoonShineRule {
        id: "S057".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Avoid using local time formatting in logs; prefer UTC for consistency".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S058".to_string(), MoonShineRule {
        id: "S058".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Auto-registered rule (description unavailable)".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
    rules.insert("S058".to_string(), MoonShineRule {
        id: "S058".to_string(),
        category: MoonShineRuleCategory::Security,
        severity: LintSeverity::Warning,
        description: "Detect SSRF vulnerabilities via unvalidated user-controlled URLs".to_string(),
        ai_enhanced: true,
        implementation: RuleImplementation::AiAssisted,
    });
}
