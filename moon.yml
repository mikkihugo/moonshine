$schema: 'https://moonrepo.dev/schemas/project.json'

# Moon Shine WASM Extension for moonrepo - Enhanced Build Configuration
type: 'library'
language: 'rust'
platform: 'unknown'

workspace:
  inheritedTasks:
    exclude: ['type-check', 'lint', 'test', 'build']

# Enhanced WASM build tasks with advanced Moon features
tasks:
  # Dependency management tasks
  deps-fetch:
    # Fetch and cache all Rust dependencies
    command: 'cargo fetch --target wasm32-wasip1'
    inputs:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rust-toolchain.toml'
    outputs: []  # No reliable outputs from cargo fetch
    env:
      CARGO_TARGET_DIR: 'target'
      CARGO_HOME: 'target/.cargo'
    options:
      cache: true
      runInCI: true
      persistent: false

  deps-update:
    # Update dependencies when Cargo.toml changes
    command: 'cargo update --target wasm32-wasip1'
    inputs:
      - 'Cargo.toml'
    outputs:
      - 'Cargo.lock'
    env:
      CARGO_TARGET_DIR: 'target'
    options:
      cache: true
      runInCI: true
      persistent: false

  build:
    command: 'cargo build --target wasm32-wasip1 --release'
    deps: ['deps-fetch']  # Ensure dependencies are fetched first
    inputs:
      - 'Cargo.lock'  # Only invalidate on lockfile changes (not Cargo.toml)
      - 'src/**/*.rs'
      - 'rust-toolchain.toml'
    outputs:
      # Cache the full target directory for maximum reuse
      - 'target/wasm32-wasip1/release/**/*'
      - 'target/wasm32-wasip1/release/.fingerprint/**/*'
      - 'target/wasm32-wasip1/release/deps/**/*'
      - 'target/wasm32-wasip1/release/build/**/*'
    env:
      # Optimize Rust compilation with aggressive caching
      CARGO_INCREMENTAL: '1'
      CARGO_TARGET_DIR: 'target'
      # Enable parallel builds and dependency caching
      CARGO_BUILD_JOBS: '4'
      # Cache registry and git dependencies
      CARGO_NET_RETRY: '3'
      CARGO_HTTP_TIMEOUT: '30'
      # Optimize WASM-specific builds
      CARGO_PROFILE_RELEASE_OPT_LEVEL: 's'
      CARGO_PROFILE_RELEASE_LTO: 'true'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure for faster feedback
      # Auto cleanup cache after build

  lint:
    command: 'cargo clippy --target wasm32-wasip1 --all-targets --all-features -- -W clippy::all -W clippy::pedantic -W clippy::nursery -W clippy::cargo -D warnings'
    deps: ['deps-fetch']
    inputs:
      - 'Cargo.lock'  # Only invalidate on lockfile changes
      - 'src/**/*.rs'
      - 'rust-toolchain.toml'
    outputs:
      - 'target/wasm32-wasip1/debug/deps/**/*'
      - 'target/wasm32-wasip1/debug/.fingerprint/**/*'
      - 'target/wasm32-wasip1/debug/build/**/*'
    env:
      CARGO_INCREMENTAL: '1'
      CARGO_TARGET_DIR: 'target'
      CARGO_BUILD_JOBS: '4'
      # Enable strict clippy with all lints
      RUSTFLAGS: '-D warnings'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure
      # Auto cleanup cache

  test:
    command: 'cargo test --all --release'
    deps: ['deps-fetch']
    inputs:
      - 'Cargo.lock'  # Only invalidate on lockfile changes
      - 'src/**/*.rs'
      - 'tests/**/*.rs'
      - 'rust-toolchain.toml'
    outputs: []  # Don't cache test artifacts
    options:
      cache: false  # Tests shouldn't be cached
      runInCI: true
      persistent: false
      # Kill process on failure for faster test feedback

  type-check:
    command: 'cargo check --target wasm32-wasip1'
    deps: ['deps-fetch']
    inputs:
      - 'Cargo.lock'  # Only invalidate on lockfile changes
      - 'src/**/*.rs'
      - 'rust-toolchain.toml'
    outputs:
      - 'target/wasm32-wasip1/debug/deps/**/*'
      - 'target/wasm32-wasip1/debug/.fingerprint/**/*'
      - 'target/wasm32-wasip1/debug/build/**/*'
    env:
      CARGO_INCREMENTAL: '1'
      CARGO_TARGET_DIR: 'target'
      CARGO_BUILD_JOBS: '4'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure
      # Auto cleanup cache

  format:
    command: 'dprint fmt'
    inputs:
      - 'src/**/*.rs'
      - 'dprint.json'
      - '**/*.{ts,tsx,js,jsx,json}'
    outputs: []
    env:
      PATH: '/home/mhugo/.dprint/bin:$PATH'
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure

  shine:
    # Complete workflow: format → lint → test
    command: 'echo "Running moon-shine complete workflow: format, lint, test"'
    deps: ['format', 'lint', 'test']
    inputs:
      - 'src/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rust-toolchain.toml'
      - 'dprint.json'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure for complete workflow

  coverage:
    # Generate comprehensive code coverage reports
    command: 'cargo tarpaulin --config tarpaulin.toml --target wasm32-wasip1'
    deps: ['build']
    inputs:
      - 'src/**/*.rs'
      - 'tests/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'tarpaulin.toml'
    outputs:
      - 'target/coverage/**/*'
    env:
      CARGO_INCREMENTAL: '1'
      CARGO_TARGET_DIR: 'target'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure
      # Auto cleanup cache after coverage

  test-unit-chicago:
    # Chicago school unit tests (state-based testing)
    command: 'cargo test chicago_style_units --target wasm32-wasip1 --release'
    deps: ['build']
    inputs:
      - 'src/**/*.rs'
      - 'tests/chicago_style_units.rs'
      - 'Cargo.toml'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure

  test-unit-london:
    # London school unit tests (interaction-based testing)
    command: 'cargo test london_style_mocked --target wasm32-wasip1 --release'
    deps: ['build']
    inputs:
      - 'src/**/*.rs'
      - 'tests/london_style_mocked.rs'
      - 'Cargo.toml'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure

  test-property:
    # Property-based testing with quickcheck and proptest
    command: 'cargo test property_based_tests --target wasm32-wasip1 --release'
    deps: ['build']
    inputs:
      - 'src/**/*.rs'
      - 'tests/property_based_tests.rs'
      - 'Cargo.toml'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure

  test-comprehensive:
    # Run all test types for 100% coverage
    command: 'echo "Running comprehensive test suite: Chicago + London + Property-based"'
    deps: ['test-unit-chicago', 'test-unit-london', 'test-property', 'test']
    inputs:
      - 'src/**/*.rs'
      - 'tests/**/*.rs'
      - 'Cargo.toml'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure for comprehensive testing

  test-with-coverage:
    # Complete testing with coverage analysis
    command: 'echo "Testing with coverage analysis complete"'
    deps: ['test-comprehensive', 'coverage']
    inputs:
      - 'src/**/*.rs'
      - 'tests/**/*.rs'
      - 'tarpaulin.toml'
    outputs:
      - 'target/coverage/**/*'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure
      # Auto cleanup cache after full test suite

  # New enhanced tasks with advanced Moon features

  clean:
    # Deep clean with cache management
    command: 'cargo clean && rm -rf target/coverage'
    inputs: []
    outputs: []
    options:
      cache: false
      runInCI: false
      persistent: false
      # Kill process on failure
      # Always run locally, never cache

  cache-clean:
    # Clean Moon's cache for this project
    command: 'moon cache clean moon-shine'
    inputs: []
    outputs: []
    options:
      cache: false
      runInCI: false
      persistent: false
      # Kill process on failure
      # Always run locally

  deps-check:
    # Check for outdated dependencies
    command: 'cargo outdated --exit-code 1'
    inputs:
      - 'Cargo.toml'
      - 'Cargo.lock'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure

  audit:
    # Security audit of dependencies
    command: 'cargo audit'
    inputs:
      - 'Cargo.toml'
      - 'Cargo.lock'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure

  bench:
    # Run benchmarks
    command: 'cargo bench --target wasm32-wasip1'
    deps: ['build']
    inputs:
      - 'src/**/*.rs'
      - 'benches/**/*.rs'
      - 'Cargo.toml'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure

  doc:
    # Generate documentation
    command: 'cargo doc --target wasm32-wasip1 --no-deps --document-private-items'
    inputs:
      - 'src/**/*.rs'
      - 'Cargo.toml'
    outputs:
      - 'target/wasm32-wasip1/doc/**/*'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure
      # Auto cleanup cache

  # CI/CD optimized tasks

  ci-build:
    # CI-optimized build with maximum caching
    command: 'cargo build --target wasm32-wasip1 --release'
    deps: ['deps-fetch']
    inputs:
      - 'Cargo.lock'  # Only invalidate on lockfile changes
      - 'src/**/*.rs'
      - 'rust-toolchain.toml'
    outputs:
      - 'target/wasm32-wasip1/release/**/*'
      - 'target/wasm32-wasip1/release/.fingerprint/**/*'
      - 'target/wasm32-wasip1/release/deps/**/*'
      - 'target/wasm32-wasip1/release/build/**/*'
    env:
      CARGO_INCREMENTAL: '0'  # Disable incremental for CI consistency
      CARGO_TARGET_DIR: 'target'
      CARGO_BUILD_JOBS: '2'   # Conservative for CI resources
      CARGO_NET_RETRY: '5'    # More retries for CI network issues
      CARGO_HTTP_TIMEOUT: '60'
      CARGO_PROFILE_RELEASE_OPT_LEVEL: 's'
      CARGO_PROFILE_RELEASE_LTO: 'true'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure
      # Auto cleanup cache in CI

  ci-test:
    # CI-optimized testing with coverage
    command: 'cargo test --all --release -- --nocapture'
    deps: ['ci-build']
    inputs:
      - 'src/**/*.rs'
      - 'tests/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
    outputs: []
    options:
      cache: false
      runInCI: true
      persistent: false
      # Kill process on failure

  ci-lint:
    # CI-optimized linting with strict clippy
    command: 'cargo clippy --target wasm32-wasip1 --all-targets --all-features -- -W clippy::all -W clippy::pedantic -W clippy::cargo -D warnings'
    deps: ['ci-build']
    inputs:
      - 'src/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
    outputs: []
    env:
      CARGO_INCREMENTAL: '0'  # Disable incremental for CI consistency
      CARGO_TARGET_DIR: 'target'
      RUSTFLAGS: '-D warnings'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure
      # Auto cleanup cache

  # Development workflow tasks

  dev-build:
    # Development build with fast feedback
    command: 'cargo build --target wasm32-wasip1'
    deps: ['deps-fetch']
    inputs:
      - 'Cargo.lock'  # Only invalidate on lockfile changes
      - 'src/**/*.rs'
      - 'rust-toolchain.toml'
    outputs:
      - 'target/wasm32-wasip1/debug/**/*'
      - 'target/wasm32-wasip1/debug/.fingerprint/**/*'
      - 'target/wasm32-wasip1/debug/deps/**/*'
      - 'target/wasm32-wasip1/debug/build/**/*'
    env:
      CARGO_INCREMENTAL: '1'
      CARGO_TARGET_DIR: 'target'
      CARGO_BUILD_JOBS: '8'  # Use more cores for development
      CARGO_PROFILE_DEV_OPT_LEVEL: '0'  # Fast compiles
    options:
      cache: true
      runInCI: false
      persistent: false
      # Kill process on failure
      # Auto cleanup cache
      # Local development only

  dev-test:
    # Development testing with watch mode
    command: 'cargo test --all'
    deps: ['deps-fetch']
    inputs:
      - 'Cargo.lock'  # Only invalidate on lockfile changes
      - 'src/**/*.rs'
      - 'tests/**/*.rs'
      - 'rust-toolchain.toml'
    outputs: []
    options:
      cache: false
      runInCI: false
      persistent: false
      # Kill process on failure
      # Local development only

  watch-build:
    # Watch mode for development
    command: 'cargo watch -x "build --target wasm32-wasip1"'
    inputs: []
    outputs: []
    options:
      cache: false
      runInCI: false
      persistent: true  # Keep running
      # Kill process on failure
      # Local development only

  watch-test:
    # Watch mode for testing
    command: 'cargo watch -x test'
    inputs: []
    outputs: []
    options:
      cache: false
      runInCI: false
      persistent: true  # Keep running
      # Kill process on failure
      # Local development only

  # Quality assurance tasks

  quality-check:
    # Complete quality assurance pipeline
    command: 'echo "Quality assurance complete"'
    deps: ['lint', 'test', 'audit', 'deps-check', 'coverage']
    inputs:
      - 'src/**/*.rs'
      - 'tests/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'tarpaulin.toml'
    outputs:
      - 'target/coverage/**/*'
    options:
      cache: true
      runInCI: true
      persistent: false
      # Kill process on failure
      # Auto cleanup cache

  pre-commit:
    # Pre-commit quality checks with strict linting
    command: 'echo "Pre-commit checks passed"'
    deps: ['format', 'lint', 'type-check']
    inputs:
      - 'src/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'dprint.json'
    outputs: []
    options:
      cache: true
      runInCI: false
      persistent: false
      # Kill process on failure
      # Auto cleanup cache
      # Local development only

  # Dependency management utilities

  deps-tree:
    # Show dependency tree
    command: 'cargo tree --target wasm32-wasip1'
    inputs:
      - 'Cargo.lock'
    outputs: []
    options:
      cache: false
      runInCI: false
      persistent: false

  deps-clean:
    # Clean dependency cache
    command: 'cargo cache --autoclean'
    inputs: []
    outputs: []
    options:
      cache: false
      runInCI: false
      persistent: false

  # New strict quality tasks

  lint-strict:
    # Ultra-strict clippy linting for maximum code quality
    command: 'cargo clippy --target wasm32-wasip1 --all-targets --all-features -- -W clippy::all -W clippy::pedantic -W clippy::nursery -W clippy::cargo -W clippy::restriction -D warnings'
    deps: ['deps-fetch']
    inputs:
      - 'Cargo.lock'
      - 'src/**/*.rs'
      - 'rust-toolchain.toml'
    outputs: []
    env:
      CARGO_INCREMENTAL: '1'
      CARGO_TARGET_DIR: 'target'
      CARGO_BUILD_JOBS: '4'
      RUSTFLAGS: '-D warnings'
    options:
      cache: false  # Don't cache strict linting results
      runInCI: false
      persistent: false

  lint-pedantic:
    # Pedantic clippy linting (very strict but may have false positives)
    command: 'cargo clippy --target wasm32-wasip1 --all-targets -- -W clippy::pedantic -D warnings'
    deps: ['deps-fetch']
    inputs:
      - 'Cargo.lock'
      - 'src/**/*.rs'
      - 'rust-toolchain.toml'
    outputs: []
    env:
      CARGO_INCREMENTAL: '1'
      CARGO_TARGET_DIR: 'target'
      CARGO_BUILD_JOBS: '4'
    options:
      cache: false
      runInCI: false
      persistent: false
