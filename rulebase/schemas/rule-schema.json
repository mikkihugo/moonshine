{nts --re
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MoonShine Rule Definition",
  "description": "Schema for defining rules in the MoonShine rulebase",
  "type": "object",
  "required": ["id", "name", "description", "category", "severity", "implementation"],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^[a-z0-9-@/]+$",
      "description": "ESLint-compatible rule identifier"
    },
    "name": {
      "type": "string",
      "description": "Human-readable rule name"
    },
    "description": {
      "type": "string",
      "description": "Detailed rule description"
    },
    "category": {
      "type": "string",
      "enum": [
        "Security", "Performance", "CodeQuality", "TypeScript",
        "JavaScript", "React", "NodeJS", "Testing", "Accessibility",
        "AsyncPatterns", "AIBehavioral", "Cognitive", "Patterns",
        "Architecture", "AIEnhanced", "Hybrid", "Excellence", "AI"
      ]
    },
    "severity": {
      "type": "string",
      "enum": ["Error", "Warning", "Info", "Style"]
    },
    "implementation": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "type": { "const": "StaticAnalysis" },
            "rule_name": { "type": "string" }
          },
          "required": ["type", "rule_name"]
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "AiBehavioral" },
            "pattern_type": { "type": "string" },
            "ai_prompt": { "type": "string" },
            "confidence_threshold": { "type": "number", "minimum": 0.0, "maximum": 1.0 },
            "model_preference": { "type": "string", "enum": ["claude", "gpt-4", "gemini", "auto"] },
            "context_requirements": {
              "type": "object",
              "properties": {
                "needs_ast": { "type": "boolean" },
                "needs_dependencies": { "type": "boolean" },
                "needs_project_context": { "type": "boolean" },
                "max_context_tokens": { "type": "integer", "minimum": 1000, "maximum": 200000 }
              }
            }
          },
          "required": ["type", "pattern_type"]
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "AIEnhanced" },
            "base_rule": { "type": "string" },
            "ai_enhancements": {
              "type": "object",
              "properties": {
                "context_analysis": { "type": "boolean" },
                "smart_fixes": { "type": "boolean" },
                "false_positive_reduction": { "type": "boolean" },
                "severity_adjustment": { "type": "boolean" },
                "pattern_learning": { "type": "boolean" }
              }
            },
            "enhancement_prompt": { "type": "string" },
            "fallback_to_static": { "type": "boolean", "default": true }
          },
          "required": ["type", "base_rule"]
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "Regex" },
            "pattern": { "type": "string" },
            "flags": { "type": "string" }
          },
          "required": ["type", "pattern"]
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "AstQuery" },
            "query": { "type": "string" },
            "language": { "type": "string" }
          },
          "required": ["type", "query", "language"]
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "DataFlow" },
            "source_patterns": { "type": "array", "items": { "type": "string" } },
            "sink_patterns": { "type": "array", "items": { "type": "string" } }
          },
          "required": ["type", "source_patterns", "sink_patterns"]
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "ExternalTool" },
            "command": { "type": "string" },
            "args": { "type": "array", "items": { "type": "string" } }
          },
          "required": ["type", "command"]
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "Hybrid" },
            "implementations": {
              "type": "array",
              "items": { "$ref": "#/properties/implementation" }
            },
            "combination_strategy": {
              "type": "string",
              "enum": ["all", "best_confidence", "weighted_average", "majority_vote"],
              "default": "best_confidence"
            },
            "confidence_weights": {
              "type": "object",
              "additionalProperties": { "type": "number", "minimum": 0.0, "maximum": 1.0 }
            }
          },
          "required": ["type", "implementations"]
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "SmartRule" },
            "learning_enabled": { "type": "boolean", "default": true },
            "adaptation_threshold": { "type": "number", "minimum": 0.0, "maximum": 1.0, "default": 0.8 },
            "feedback_learning": { "type": "boolean", "default": true },
            "pattern_evolution": { "type": "boolean", "default": false },
            "base_implementations": {
              "type": "array",
              "items": { "$ref": "#/properties/implementation" }
            }
          },
          "required": ["type", "base_implementations"]
        }
      ]
    },
    "cost": {
      "type": "integer",
      "minimum": 1,
      "maximum": 1000,
      "description": "Execution cost estimate (1-1000)"
    },
    "autofix": {
      "type": "boolean",
      "description": "Whether rule supports automatic fixing"
    },
    "ai_enhanced": {
      "type": "boolean",
      "description": "Whether rule uses AI enhancement"
    },
    "tags": {
      "type": "array",
      "items": { "type": "string" },
      "description": "Rule tags for filtering"
    },
    "dependencies": {
      "type": "array",
      "items": { "type": "string" },
      "description": "Other rules this rule depends on"
    },
    "examples": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Code examples that pass this rule"
        },
        "invalid": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Code examples that violate this rule"
        }
      }
    },
    "fixExample": {
      "type": "string",
      "description": "Example of how to fix violations"
    },
    "rationale": {
      "type": "string",
      "description": "Why this rule matters"
    },
    "docs_url": {
      "type": "string",
      "format": "uri",
      "description": "Link to documentation"
    },
    "related_rules": {
      "type": "array",
      "items": { "type": "string" },
      "description": "Related rules that work together"
    },
    "false_positive_rate": {
      "type": "string",
      "enum": ["low", "medium", "high"],
      "description": "Expected false positive rate"
    },
    "performance_impact": {
      "type": "string",
      "enum": ["minimal", "low", "medium", "high"],
      "description": "Runtime performance impact"
    },
    "ai_metadata": {
      "type": "object",
      "properties": {
        "confidence_score": {
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0,
          "description": "AI model confidence in rule effectiveness"
        },
        "training_data_size": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of examples used for AI training"
        },
        "last_training_date": {
          "type": "string",
          "format": "date-time",
          "description": "When the AI rule was last trained"
        },
        "model_version": {
          "type": "string",
          "description": "AI model version used for this rule"
        },
        "adaptation_metrics": {
          "type": "object",
          "properties": {
            "accuracy": { "type": "number", "minimum": 0.0, "maximum": 1.0 },
            "precision": { "type": "number", "minimum": 0.0, "maximum": 1.0 },
            "recall": { "type": "number", "minimum": 0.0, "maximum": 1.0 },
            "f1_score": { "type": "number", "minimum": 0.0, "maximum": 1.0 },
            "false_positive_rate": { "type": "number", "minimum": 0.0, "maximum": 1.0 }
          }
        },
        "learning_history": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timestamp": { "type": "string", "format": "date-time" },
              "performance_change": { "type": "number" },
              "confidence_change": { "type": "number" },
              "adaptation_trigger": { "type": "string" }
            }
          }
        }
      }
    },
    "hybrid_config": {
      "type": "object",
      "properties": {
        "static_weight": {
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0,
          "default": 0.6,
          "description": "Weight given to static analysis results"
        },
        "ai_weight": {
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0,
          "default": 0.4,
          "description": "Weight given to AI analysis results"
        },
        "consensus_threshold": {
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0,
          "default": 0.7,
          "description": "Minimum agreement threshold for hybrid rules"
        },
        "conflict_resolution": {
          "type": "string",
          "enum": ["static_priority", "ai_priority", "highest_confidence", "conservative"],
          "default": "highest_confidence",
          "description": "How to resolve conflicts between static and AI analysis"
        }
      }
    }
  }
}